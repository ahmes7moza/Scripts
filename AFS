local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "AFS | Lucky Event Part 2" .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, 
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl 
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "box" }),
    EventFarm = Window:AddTab({ Title = "EventFarm", Icon = "alarm-clock" }),
    Raid = Window:AddTab({ Title = "Raid", Icon = "umbrella" }),
    InfTower = Window:AddTab({ Title = "InfTower", Icon = "disc" })
}

Window:SelectTab(1)

------------------------------------------------------- Main Tab

local AutoClaim = false

local Toggle = Tabs.Main:AddToggle("ClaimReward", { 
    Title = "Auto Claim Reward",
    Description = "Automatically claims rewards 1-12 every second",
    Default = false,
    Callback = function(Value)
        AutoClaim = Value
        if AutoClaim then
            startAutoClaim()
        end
    end
})

local AntiAFK = false

Tabs.Main:AddToggle("AntiAFKToggle", {
    Title = "Anti-AFK",
    Description = "Prevents AFK kick",
    Default = false,
    Callback = function(Value)
        AntiAFK = Value
        if AntiAFK then
            spawn(function()
                while AntiAFK do
                    game:GetService("VirtualUser"):CaptureController()
                    game:GetService("VirtualUser"):ClickButton2(Vector2.new())

                    print("Anti-AFK activated!")

                    wait(30) -- Runs every 30 seconds
                end
            end)
        end
    end
})



------------------------------------------------------- Event Tab

local AutoFarm = false

local Toggle = Tabs.EventFarm:AddToggle("MyToggle", {
    Title = "Lucky Farm", 
    Description = "Farm Lucky Event",
    Default = false,
    Callback = function(Value)
        AutoFarm = Value
        if AutoFarm then
            startAutoFarm()
        end
    end
})

------------------------------------------------------ Raid Tab

local RaidAutoFarm = false

local Toggle = Tabs.Raid:AddToggle("MyToggle", {
    Title = "RaidFarm", 
    Description = "Farm Raid",
    Default = false,
    Callback = function(Value)
        RaidAutoFarm = Value
        if RaidAutoFarm then
            startRaidAutoFarm()
        end
    end
})

local Section = Tabs.Raid:AddSection("Igris Farm")

local AriseAutoFarm = false

Tabs.Raid:AddToggle("AriseToggle", {
    Title = "Auto Arise",
    Description = "Arise Igris",
    Default = false,
    Callback = function(Value)
        AriseAutoFarm = Value
        if AriseAutoFarm then
            startAriseLoop()
        end
    end
})

local AutoExitRaid = false

Tabs.Raid:AddToggle("TeleportRaidToggle", {
    Title = "Teleport to Raid",
    Description = "Teleports raid",
    Default = false,
    Callback = function(Value)
        AutoExitRaid = Value
        if AutoExitRaid then
            startAutoExitRaid()
        end
    end
})

local exitlooparise = false

Tabs.Raid:AddToggle("ExitRaidToggle", {
    Title = "Auto Exit Raid",
    Description = "exits raid",
    Default = false,
    Callback = function(Value)
        exitlooparise = Value
        if exitlooparise then
            exitloop()
        end
    end
})


local Section = Tabs.Raid:AddSection("AzureShard Farm")


local AutoExitRaidTimer = false

Tabs.Raid:AddToggle("TeleportTimerRaidToggle", {
    Title = "Teleport to Raid Timer",
    Description = "Teleports raid",
    Default = false,
    Callback = function(Value)
        AutoExitRaidTimer = Value
        if AutoExitRaidTimer then
            startAutoExitRaidTimer()
        end
    end
})

local exitloopariseTimer = false

Tabs.Raid:AddToggle("ExitTimerRaidToggle", {
    Title = "Auto Exit Raid Timer",
    Description = "exits raid",
    Default = false,
    Callback = function(Value)
        exitloopariseTimer = Value
        if exitloopariseTimer then
            exitloopTimer()
        end
    end
})

------------------------------------------------------ InfTower Tab

local infTowerFarm = false

local Toggle = Tabs.InfTower:AddToggle("MyToggle", {
    Title = "infTowerFarm", 
    Description = "infTowerFarm",
    Default = false,
    Callback = function(Value)
        infTowerFarm = Value
        if infTowerFarm then
            startinfTowerFarm()
        end
    end
})

local infTowerTeleport = false

Tabs.InfTower:AddToggle("InfTowerTeleportToggle", {
    Title = "Infinite Tower Teleport",
    Description = "Teleports to Infinite Tower",
    Default = false,
    Callback = function(Value)
        infTowerTeleport = Value
        if infTowerTeleport then
            StartInfTowerTeleport()
        end
    end
})


-----------------------------------------------------------------
-- Main Functions

function startAutoClaim()
    spawn(function()
        while AutoClaim do
            for i = 1, 12 do
                if not AutoClaim then return end
                
                local args = { [1] = i }
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CLAIM_REWARD"):FireServer(unpack(args))
                
                print("Claimed reward:", i)
                wait(1) -- Wait 1 second between each claim
            end
        end
    end)
end

-- Event Functions

local function findNearestEnemy()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:FindFirstChildWhichIsA("BasePart")

    if not rootPart then
        warn("No valid movement part found!")
        return nil
    end

    local nearestEnemy = nil
    local minDistance = math.huge

    for _, enemy in ipairs(workspace.Enemies.CLOVER:GetChildren()) do
        if enemy:IsA("Model") then
            local enemyPart = enemy:FindFirstChild("Head") or enemy:FindFirstChildWhichIsA("BasePart")
            if enemyPart then
                local distance = (rootPart.Position - enemyPart.Position).Magnitude
                if distance < minDistance then
                    minDistance = distance
                    nearestEnemy = enemyPart
                end
            end
        end
    end

    return nearestEnemy
end

function startAutoFarm()
    spawn(function()
        while AutoFarm do
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local rootPart = character:FindFirstChildWhichIsA("BasePart")

            if not rootPart then
                warn("No valid movement part found!")
                return
            end

            local currentTarget
            repeat
                if not AutoFarm then return end  
                currentTarget = findNearestEnemy()
                if currentTarget then
                    rootPart.CFrame = CFrame.new(currentTarget.Position)
                else
                    print("Not found")
                end
                wait(0.5)
            until not AutoFarm or not currentTarget or not currentTarget.Parent
        end
    end)
end

-- Raid Functions

local function findRaidEnemy()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:FindFirstChild("HumanoidRootPart")

    if not rootPart then
        warn("No valid HumanoidRootPart found!")
        return nil
    end

    local raidEnemiesFolder = workspace:FindFirstChild("Towers")
        and workspace.Towers:FindFirstChild("Raid 1")
        and workspace.Towers["Raid 1"]:FindFirstChild("Enemies")
        and workspace.Towers["Raid 1"].Enemies:FindFirstChild("1")

    if raidEnemiesFolder then
        local nearestEnemy = nil
        local minDistance = math.huge

        for _, enemy in ipairs(raidEnemiesFolder:GetChildren()) do
            if enemy:IsA("Model") then
                local enemyPart = enemy:FindFirstChild("HumanoidRootPart") or enemy:FindFirstChildWhichIsA("BasePart")
                if enemyPart then
                    local distance = (rootPart.Position - enemyPart.Position).Magnitude
                    if distance < minDistance then
                        minDistance = distance
                        nearestEnemy = enemyPart
                    end
                end
            end
        end
        return nearestEnemy
    end

    return nil
end

function startRaidAutoFarm()
    spawn(function()
        while RaidAutoFarm do
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local rootPart = character:FindFirstChild("HumanoidRootPart")

            if not rootPart then
                warn("No valid HumanoidRootPart found!")
                return
            end

            repeat
                currentTarget = findRaidEnemy()
                if currentTarget then
                    rootPart.CFrame = CFrame.new(currentTarget.Position)
                else
                    print("Raid Enemy Not Found")
                end
                wait(0.5) 
            until not RaidAutoFarm or not currentTarget or not currentTarget.Parent
        end
    end)
end

function startAriseLoop()
    spawn(function()
        while AriseAutoFarm do
            local args = {
                [1] = "Raid 1",
                [2] = "Boss"
            }

            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("SERVER_ARISE"):InvokeServer(unpack(args))

            print("Arise activated!") -- Debug log
            wait(0.1) -- Wait 5 seconds before running again
        end
    end)
end

function exitloop()
    spawn(function()
    while exitlooparise do
        local args = { [1] = "Raid 1" }
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("EXIT_TOWER"):FireServer(unpack(args))

        print("Exited Raid!")
        wait(16)
        end
    end)
end

function startAutoExitRaid()
    spawn(function()
        while AutoExitRaid do
            -- Teleport Player
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local rootPart = character:FindFirstChild("HumanoidRootPart")

            if rootPart then
                rootPart.CFrame = CFrame.new(-353.5047, 230.965805, -404.170197, 
                                             0.0263632238, -1.73442061e-09, -0.999652445, 
                                             8.77948239e-08, 1, 5.80335668e-10, 
                                             0.999652445, -8.77796111e-08, 0.0263632238)
                print("Teleported to exit location!")
            else
                warn("No valid HumanoidRootPart found!")
            end          

            -- Wait 8 minutes and 10 seconds before running again
            wait(18) 
        end
    end)
end

function exitloopTimer()
    spawn(function()
        while exitloopariseTimer do
            local args = { [1] = "Raid 1" }
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("EXIT_TOWER"):FireServer(unpack(args))
    
            print("Exited Raid!")
            wait(525)
            end
        end)
    end
    
    function startAutoExitRaidTimer()
        spawn(function()
            while AutoExitRaidTimer do
                -- Teleport Player
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local rootPart = character:FindFirstChild("HumanoidRootPart")
    
                if rootPart then
                    rootPart.CFrame = CFrame.new(-353.5047, 230.965805, -404.170197, 
                                                 0.0263632238, -1.73442061e-09, -0.999652445, 
                                                 8.77948239e-08, 1, 5.80335668e-10, 
                                                 0.999652445, -8.77796111e-08, 0.0263632238)
                    print("Teleported to exit location!")
                else
                    warn("No valid HumanoidRootPart found!")
                end          
    
                -- Wait 8 minutes and 10 seconds before running again
                wait(530) 
            end
        end)
    end

-- inftower Functions

local function FindstartinfTowerFarm()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:FindFirstChild("HumanoidRootPart")

    if not rootPart then
        warn("No valid HumanoidRootPart found!")
        return nil
    end

    local inftowerEnemiesFolder = workspace:FindFirstChild("Towers")
        and workspace.Towers:FindFirstChild("Infinite Tower")
        and workspace.Towers["Infinite Tower"]:FindFirstChild("Enemies")
        and workspace.Towers["Infinite Tower"].Enemies:FindFirstChild("1")

        if inftowerEnemiesFolder then
        local nearestEnemy = nil
        local minDistance = math.huge

        for _, enemy in ipairs(inftowerEnemiesFolder:GetChildren()) do
            if enemy:IsA("Model") then
                local enemyPart = enemy:FindFirstChild("HumanoidRootPart") or enemy:FindFirstChildWhichIsA("BasePart")
                if enemyPart then
                    local distance = (rootPart.Position - enemyPart.Position).Magnitude
                    if distance < minDistance then
                        minDistance = distance
                        nearestEnemy = enemyPart
                    end
                end
            end
        end
        return nearestEnemy
    end

    return nil
end

function startinfTowerFarm()
    spawn(function()
        while infTowerFarm do -- ✅ FIXED: use the correct toggle variable
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local rootPart = character:FindFirstChild("HumanoidRootPart")

            if not rootPart then
                warn("No valid HumanoidRootPart found!")
                return
            end

            repeat
                currentTarget = FindstartinfTowerFarm()
                if currentTarget then
                    rootPart.CFrame = CFrame.new(currentTarget.Position)
                else
                    print("Infinite Tower Enemy Not Found")
                end
                wait(0.5) 
            until not infTowerFarm or not currentTarget or not currentTarget.Parent
        end
    end)
end


function StartInfTowerTeleport()
    spawn(function()
        while infTowerTeleport do
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local rootPart = character:FindFirstChild("HumanoidRootPart")

            if rootPart then
                -- Replace with the correct Infinite Tower teleport coordinates
                rootPart.CFrame = CFrame.new(-466.713, 231.152, -546.245, 
                                             0.999978, -1.15756e-08, -0.00654374, 
                                             1.19978e-08, 1, 6.44806e-08, 
                                             0.00654374, -6.45578e-08, 0.999978)

                print("Teleported to Infinite Tower!")
            else
                warn("No valid HumanoidRootPart found!")
            end

            wait(30) -- Teleports every 30 seconds
        end
    end)
end
