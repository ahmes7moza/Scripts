local Utils = {}
    
function getvector3(ag)
    if typeof(ag) == 'Vector3' then
        return ag
    else
        return ag.Position
    end
end


function Utils:Loop(a)
    spawn(function()
        while true do wait()
            a()
        end
    end)
end

function Utils:Var(name,toogle)
    Utils[name] = toogle
end


function Utils:GetPlayer()
    return game.Players.LocalPlayer
end

function Utils:GetCharacter()
    if not Utils:GetPlayer().Character then
        repeat wait() until Utils:GetPlayer().Character
    end
    return Utils:GetPlayer().Character
end


function Utils:GetObjects(path)
    local ca = {}
    for i,v in pairs(path:GetChildren()) do
        if not table.find(ca,v.Name) then
            table.insert(ca,v.Name)
        end
    end
    return ca
end

function Utils:GetObjectsFromCheck(path,check)
    local ca = {}
    for i,v in pairs(path:GetChildren()) do
        if not table.find(ca,v.Name) and v:FindFirstChild(check) then
            table.insert(ca,v.Name)
        end
    end
    return ca
end
function Utils:GetCFrame()
    return Utils:GetCharacter().HumanoidRootPart.CFrame
end


function Utils:GetObjectsFromName(path,check)
    local ca = {}
    for i,v in pairs(path:GetChildren()) do
        if not table.find(ca,v.Name) and string.find(v.Name,check) then
            table.insert(ca,v.Name)
        end
    end
    return ca
end


function Utils:GetMagnitudes(object1,object2)
    return ((getvector3(object1)) - (getvector3(object2))).Magnitude
end


function Utils:GetMagnitudeFromCharacter(object1)
    if not game.Players.LocalPlayer.Character then
        return 0
    end
    return (getvector3(object1) - Utils:GetCharacter().HumanoidRootPart.Position).Magnitude
end



for _,v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
    v:Disable()
end


local ZephyrionFolder = "Tawfeek"
local ConfigurationFolder = ZephyrionFolder.."/Configurations"
local ConfigurationExtension = ".txt"
--service

local uis = game:GetService("UserInputService")
local tweenservice = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local runservice = game:GetService("RunService")
local Players = game:GetService("Players")
local coregui = game:GetService("CoreGui")
--vars
local tweeninfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
local viewport = workspace.CurrentCamera.ViewportSize
local mouse = Players.LocalPlayer:GetMouse()
local Library = {
    Flags = {},
}

function Library.get_center(sizeX, sizeY)
    return UDim2.new(0.5, -(sizeX / 2), 0.5, -(sizeY / 2))
end
local CFileName = nil
local CEnabled = false
local Debounce = false

local function LoadConfiguration(Configuration)
	local Data = HttpService:JSONDecode(Configuration)
	for FlagName, FlagValue in next, Data do
		if Library.Flags[FlagName] then
			spawn(function() 
				
					if Library.Flags[FlagName].CurrentValue or Library.Flags[FlagName].CurrentKeybind or Library.Flags[FlagName].CurrentOption or Library.Flags[FlagName].Color ~= FlagValue then Library.Flags[FlagName]:Set(FlagValue) end  
			end)
		else
			print("Not Found")
		end
	end
end

local function SaveConfiguration()
	if not CEnabled then return end
	local Data = {}
	for i,v in pairs(Library.Flags) do
		
			Data[i] = v.CurrentValue or v.CurrentKeybind or v.CurrentOption or v.Color
		
	end	
	writefile(ConfigurationFolder .. "/" .. CFileName .. ConfigurationExtension, tostring(HttpService:JSONEncode(Data)))
end


function Library:validate(defuilt, options)
    for i,v in pairs(defuilt) do
        if options[i] == nil then
            options[i] = v
        end
    end
    return options
end

function Library:tween(object, goal, callback)
    local tween = tweenservice:Create(object, tweeninfo, goal)
    tween.Completed:Connect(callback or function() end)
    tween:Play()
end





function Library:CreateWindow(Settings)
    local Gui = {
        CurrentTab = nil
    }

    pcall(function()
        if not Settings.ConfigurationSaving.FileName then
            Settings.ConfigurationSaving.FileName = tostring(game.PlaceId)
        end
        if not isfolder(ZephyrionFolder.."/".."Configuration Folders") then

        end
        if Settings.ConfigurationSaving.Enabled == nil then
            Settings.ConfigurationSaving.Enabled = false
        end
        CFileName = Settings.ConfigurationSaving.FileName
        ConfigurationFolder = Settings.ConfigurationSaving.FolderName or ConfigurationFolder
        CEnabled = Settings.ConfigurationSaving.Enabled

        if Settings.ConfigurationSaving.Enabled then
            if not isfolder(ConfigurationFolder) then
                makefolder(ConfigurationFolder)
            end    
        end
    end)

    --main Frame
    do
        --- StarterGui.br
        Gui["1"] = Instance.new("ScreenGui");
        Gui["1"]["Name"] = [[br]];
        Gui["1"]["IgnoreGuiInset"] = false;
        Gui["1"]["SafeAreaCompatibility"] = "None"
        Gui["1"]["ScreenInsets"] = "None"
        Gui["1"]["ResetOnSpawn"] = false
        Gui["1"]["AutoLocalize"] = false


        if gethui then
            Gui["1"].Parent = gethui()
        elseif syn.protect_gui then 
            syn.protect_gui(Gui["1"])
            Gui["1"].Parent = coregui
        elseif coregui:FindFirstChild("RobloxGui") then
            Gui["1"].Parent = coregui:FindFirstChild("RobloxGui")

        else
            Gui["1"].Parent = coregui
        end


        if gethui then
            for _, Interface in ipairs(gethui():GetChildren()) do
                if Interface.Name == Gui["1"].Name and Interface ~= Gui["1"] then
                    Interface:Destroy()
                end
            end
        else
            for _, Interface in ipairs(coregui:GetChildren()) do
                if Interface.Name == Gui["1"].Name and Interface ~= Gui["1"] then
                    Interface:Destroy()
                end
            end
        end

        -- StarterGui.br.Main
        Gui["2"] = Instance.new("Frame", Gui["1"]);
        Gui["2"]["BorderSizePixel"] = 0;
        Gui["2"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
        Gui["2"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
        Gui["2"]["Size"] = UDim2.new(0, 496, 0, 585);
        Gui["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        Gui["2"]["Position"] = UDim2.new(0.5755593776702881, 0, 0.49961838126182556, 0);
        Gui["2"]["Name"] = [[Main]];
        Gui["2"]["ClipsDescendants"] = true

        -- StarterGui.br.Main.UICorner
        Gui["3"] = Instance.new("UICorner", Gui["2"]);


        -- StarterGui.br.Main.TopBar
        Gui["4"] = Instance.new("Frame", Gui["2"]);
        Gui["4"]["BorderSizePixel"] = 0;
        Gui["4"]["BackgroundColor3"] = Color3.fromRGB(40, 40, 42);
        Gui["4"]["Size"] = UDim2.new(1, 0, 0, 30);
        Gui["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        Gui["4"]["Name"] = [[TopBar]];

        -- StarterGui.br.Main.TopBar.UICorner
        Gui["5"] = Instance.new("UICorner", Gui["4"]);


        -- StarterGui.br.Main.TopBar.Line
        Gui["6"] = Instance.new("Frame", Gui["4"]);
        Gui["6"]["BorderSizePixel"] = 0;
        Gui["6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
        Gui["6"]["AnchorPoint"] = Vector2.new(0, 1);
        Gui["6"]["Size"] = UDim2.new(1, 0, 0, 1);
        Gui["6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        Gui["6"]["Position"] = UDim2.new(0, 0, 1, 0);
        Gui["6"]["Name"] = [[Line]];

        -- StarterGui.br.Main.TopBar.Minimize
        Gui["7"] = Instance.new("TextButton", Gui["4"]);
        Gui["7"]["TextWrapped"] = true;
        Gui["7"]["BorderSizePixel"] = 0;
        Gui["7"]["RichText"] = true;
        Gui["7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
        Gui["7"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
        Gui["7"]["TextSize"] = 35;
        Gui["7"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
        Gui["7"]["Size"] = UDim2.new(0.10250000655651093, 0, 1, 0);
        Gui["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        Gui["7"]["Text"] = [[-]];
        Gui["7"]["Name"] = [[Minimize]];
        Gui["7"]["BackgroundTransparency"] = 1;
        Gui["7"]["Position"] = UDim2.new(0.8199999928474426, 0, 0, 0);

        -- StarterGui.br.Main.TopBar.Exit
        Gui["8"] = Instance.new("TextButton", Gui["4"]);
        Gui["8"]["TextWrapped"] = true;
        Gui["8"]["BorderSizePixel"] = 0;
        Gui["8"]["RichText"] = true;
        Gui["8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
        Gui["8"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
        Gui["8"]["TextSize"] = 25;
        Gui["8"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
        Gui["8"]["Size"] = UDim2.new(0.10000000149011612, 0, 1, 0);
        Gui["8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        Gui["8"]["Text"] = [[X]];
        Gui["8"]["Name"] = [[Exit]];
        Gui["8"]["BackgroundTransparency"] = 1;
        Gui["8"]["Position"] = UDim2.new(0.8999999761581421, 0, 0, 0);

        -- StarterGui.br.Main.TopBar.HubName
        Gui["9"] = Instance.new("TextLabel", Gui["4"]);
        Gui["9"]["TextWrapped"] = true;
        Gui["9"]["BorderSizePixel"] = 0;
        Gui["9"]["RichText"] = true;
        Gui["9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
        Gui["9"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
        Gui["9"]["TextSize"] = 19;
        Gui["9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
        Gui["9"]["AnchorPoint"] = Vector2.new(0.5, 0);
        Gui["9"]["Size"] = UDim2.new(0.2928265631198883, 0, 1, 0);
        Gui["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        Gui["9"]["Text"] = Settings.name;
        Gui["9"]["Name"] = [[HubName]];
        Gui["9"]["BackgroundTransparency"] = 1;
        Gui["9"]["Position"] = UDim2.new(0.5, 0, 0, 0);

        -- StarterGui.br.Main.TopBar.Logo
        Gui["a"] = Instance.new("ImageLabel", Gui["4"]);
        Gui["a"]["BorderSizePixel"] = 0;
        Gui["a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
        Gui["a"]["Image"] = [[rbxassetid://17364461956]];
        Gui["a"]["Size"] = UDim2.new(0, 35, 0, 30);
        Gui["a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        Gui["a"]["Name"] = [[Logo]];
        Gui["a"]["BackgroundTransparency"] = 1;



        Gui["a910"] = Instance.new("UICorner", Gui["a"]);


        -- StarterGui.br.Main.TopBar.Extention
        Gui["b"] = Instance.new("Frame", Gui["4"]);
        Gui["b"]["ZIndex"] = 0;
        Gui["b"]["BorderSizePixel"] = 0;
        Gui["b"]["BackgroundColor3"] = Color3.fromRGB(40, 40, 42);
        Gui["b"]["AnchorPoint"] = Vector2.new(0, 1);
        Gui["b"]["Size"] = UDim2.new(1, 0, 0.5, 0);
        Gui["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
        Gui["b"]["Position"] = UDim2.new(0, 0, 1, 0);
        Gui["b"]["Name"] = [[Extention]];

        -- StarterGui.br.Main.DropShadowHolder
        Gui["c"] = Instance.new("Frame", Gui["2"]);
        Gui["c"]["ZIndex"] = 0;
        Gui["c"]["BorderSizePixel"] = 0;
        Gui["c"]["BackgroundTransparency"] = 1;
        Gui["c"]["Size"] = UDim2.new(1, 0, 1, 0);
        Gui["c"]["Name"] = [[DropShadowHolder]];

        -- StarterGui.br.Main.DropShadowHolder.DropShadow
        Gui["d"] = Instance.new("ImageLabel", Gui["c"]);
        Gui["d"]["ZIndex"] = 0;
        Gui["d"]["BorderSizePixel"] = 0;
        Gui["d"]["SliceCenter"] = Rect.new(49, 49, 450, 450);
        Gui["d"]["ScaleType"] = Enum.ScaleType.Slice;
        Gui["d"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
        Gui["d"]["ImageTransparency"] = 0.5;
        Gui["d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
        Gui["d"]["Image"] = [[rbxassetid://6014261993]];
        Gui["d"]["Size"] = UDim2.new(1, 47, 1, 47);
        Gui["d"]["Name"] = [[DropShadow]];
        Gui["d"]["BackgroundTransparency"] = 1;
        Gui["d"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

    end

    local dragToggle = nil

    local dragSpeed = 0.25

    local dragStart = nil

    local startPos = nil



    local function updateInput(input)

        local delta = input.Position - dragStart

        local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,

            startPos.Y.Scale, startPos.Y.Offset + delta.Y)

        game:GetService('TweenService'):Create(Gui["2"], TweenInfo.new(dragSpeed), {Position = position}):Play()

    end



    Gui["4"].InputBegan:Connect(function(input)

        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 

            dragToggle = true

            dragStart = input.Position

            startPos = Gui["2"].Position

            input.Changed:Connect(function()

                if input.UserInputState == Enum.UserInputState.End then

                    dragToggle = false

                end

            end)

        end

    end)



    uis.InputChanged:Connect(function(input)

        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then

            if dragToggle then

                updateInput(input)

            end

        end

    end)
    --navigation
    Gui["7"].MouseButton1Up:Connect(function()
        Gui["1"].Enabled = not Gui["1"].Enabled
    end)
    Gui["8"].MouseButton1Up:Connect(function()
        Gui["1"]:Destroy()
    end)

    uis.InputBegan:Connect(function(KeyCode)
        if KeyCode.KeyCode == Enum.KeyCode.LeftAlt then
            Gui["1"].Enabled = not Gui["1"].Enabled
        end
    end)



    do
       -- StarterGui.br.Main.ContentContainer
    Gui["e"] = Instance.new("Frame", Gui["2"]);
    Gui["e"]["BorderSizePixel"] = 0;
    Gui["e"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 62);
    Gui["e"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
    Gui["e"]["BackgroundTransparency"] = 1;
    Gui["e"]["Size"] = UDim2.new(1, 0, 0.949999988079071, 0);
    Gui["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
    Gui["e"]["Position"] = UDim2.new(0.5, 0, 0.5299999713897705, 0);
    Gui["e"]["Name"] = [[ContentContainer]];

    -- StarterGui.br.Main.ContentContainer.UICorner
    Gui["f"] = Instance.new("UICorner", Gui["e"]);


    -- StarterGui.br.Main.ContentContainer.UIPadding
    Gui["11"] = Instance.new("UIPadding", Gui["e"]);
    Gui["11"]["PaddingTop"] = UDim.new(0, 50);
    Gui["11"]["PaddingRight"] = UDim.new(0, 7);
    Gui["11"]["PaddingBottom"] = UDim.new(0, 7);
    Gui["11"]["PaddingLeft"] = UDim.new(0, 7);






    
     -- StarterGui.br.Main.Nav
     Gui["18"] = Instance.new("Frame", Gui["2"]);
     Gui["18"]["BorderSizePixel"] = 0;
     Gui["18"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
     Gui["18"]["BackgroundTransparency"] = 1;
     Gui["18"]["Size"] = UDim2.new(0, 582, 0, 34);
     Gui["18"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
     Gui["18"]["Position"] = UDim2.new(0.018053248524665833, 0, 0.06290322542190552, 0);
     Gui["18"]["Name"] = [[Nav]];

      -- StarterTab.br.Main.Nav.UIListLayout
      Gui["1b"] = Instance.new("UIListLayout", Gui["18"]);
      Gui["1b"]["VerticalAlignment"] = Enum.VerticalAlignment.Center;
      Gui["1b"]["FillDirection"] = Enum.FillDirection.Horizontal;
      Gui["1b"]["Padding"] = UDim.new(0, 10);
      Gui["1b"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
    end


    function Gui:CreateTab(TabSetting)

        local Tab = {
            hover = false,
            Active = false,
        }

      --render
      do
       

-- StarterTab.br.Main.Nav.Inactive

            Tab["19F"] = Instance.new("Frame", Gui["18"]);
            Tab["19F"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
            Tab["19F"]["AnchorPoint"] = Vector2.new(0, 0.5);
            Tab["19F"]["Name"] = [[Inactive]];
            Tab["19F"]["Position"] = UDim2.new(0, 0, 0.5, 0);

            Tab["19"] = Instance.new("TextLabel", Tab["19F"]);
            Tab["19"]["TextWrapped"] = Color3.fromRGB(75, 71, 71)
            Tab["19"]["BorderSizePixel"] = 0;
            Tab["19"]["RichText"] = true;
            Tab["19"]["BackgroundTransparency"] = 1;
            Tab["19"]["TextScaled"] = true;
            Tab["19"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
            Tab["19"]["TextSize"] = 21;
            Tab["19"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
            Tab["19"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
            Tab["19"]["Size"] = UDim2.new(1, 0, 1, 0);
            Tab["19"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            Tab["19"]["Text"] = TabSetting.Name;
            Tab["19"]["Name"] = "Title";
            Tab["19"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
            Tab["19F"]["Size"] = UDim2.new(0,  Tab["19F"].Title.TextBounds.X + 80, 0, 20)

            -- StarterTab.br.Main.Nav.Inactive.UICorner
            Tab["1a"] = Instance.new("UICorner", Tab["19F"]);
            Tab["1a"]["CornerRadius"] = UDim.new(0, 9);




                    -- StarterGui.br.Main.ContentContainer.Tabe
            Tab["15"] = Instance.new("Frame",  Gui["e"]);
            Tab["15"]["BorderSizePixel"] = 0;
            Tab["15"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
            Tab["15"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
            Tab["15"]["Size"] = UDim2.new(0.9900000095367432, 0, 0.9700000286102295, 0);
            Tab["15"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            Tab["15"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
            Tab["15"]["Name"] = [[Tabe]];
            Tab["15"]["Visible"] = false

            -- StarterGui.br.Main.ContentContainer.Tabe.UIStroke
            Tab["16"] = Instance.new("UIStroke", Tab["15"]);
            Tab["16"]["Color"] = Color3.fromRGB(96, 96, 96);
            Tab["16"]["Thickness"] = 2;
            Tab["16"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

            -- StarterGui.br.Main.ContentContainer.Tabe.UICorner
            Tab["17"] = Instance.new("UICorner", Tab["15"]);
            Tab["17"]["CornerRadius"] = UDim.new(0, 4);

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame
            Tab["18"] = Instance.new("ScrollingFrame", Tab["15"]);
            Tab["18"]["Active"] = true;
            Tab["18"]["BorderSizePixel"] = 0;
            Tab["18"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
            Tab["18"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
            Tab["18"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
            Tab["18"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
            Tab["18"]["Size"] = UDim2.new(0.4946712553501129, 0, 1, -5);
            Tab["18"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
            Tab["18"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            Tab["18"]["ScrollBarThickness"] = 5;
            Tab["18"]["Position"] = UDim2.new(0.24733562767505646, 0, 0.4951554238796234, 0);
            Tab["18"]["Name"] = [[Frame]];

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.UIPadding
            Tab["19G"] = Instance.new("UIPadding", Tab["18"]);
            Tab["19G"]["PaddingTop"] = UDim.new(0, 5);
            Tab["19G"]["PaddingRight"] = UDim.new(0, 5);
            Tab["19G"]["PaddingBottom"] = UDim.new(0, 1);
            Tab["19G"]["PaddingLeft"] = UDim.new(0, 5);


            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.UIListLayout
            Tab["23"] = Instance.new("UIListLayout", Tab["18"]);
            Tab["23"]["Padding"] = UDim.new(0, 8);
            Tab["23"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

            -- StarterGui.br.Main.ContentContainer.Tabe.UIListLayout
            Tab["24"] = Instance.new("UIListLayout", Tab["15"]);
            Tab["24"]["FillDirection"] = Enum.FillDirection.Horizontal;
            Tab["24"]["Padding"] = UDim.new(0, 4);
            Tab["24"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame2
            Tab["25"] = Instance.new("ScrollingFrame", Tab["15"]);
            Tab["25"]["Active"] = true;
            Tab["25"]["BorderSizePixel"] = 0;
            Tab["25"]["CanvasSize"] = UDim2.new(0, 0, 0, 0);
            Tab["25"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
            Tab["25"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
            Tab["25"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
            Tab["25"]["Size"] = UDim2.new(0.4946712553501129, 0, 1, -5);
            Tab["25"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
            Tab["25"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            Tab["25"]["ScrollBarThickness"] = 5;
            Tab["25"]["Position"] = UDim2.new(0.24733562767505646, 0, 0.4951554238796234, 0);
            Tab["25"]["Name"] = [[Frame2]];

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame2.UIPadding
            Tab["26"] = Instance.new("UIPadding", Tab["25"]);
            Tab["26"]["PaddingTop"] = UDim.new(0, 5);
            Tab["26"]["PaddingRight"] = UDim.new(0, 5);
            Tab["26"]["PaddingBottom"] = UDim.new(0, 1);
            Tab["26"]["PaddingLeft"] = UDim.new(0, 5);

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame2.UIListLayout
            Tab["27"] = Instance.new("UIListLayout", Tab["25"]);
            Tab["27"]["Padding"] = UDim.new(0, 8);
            Tab["27"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


    end



        function Tab:SectionHolder(SettingsSection)
            local SectionHolder = {}
                do 
            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section
            SectionHolder["1a"] = Instance.new("Frame", Tab["18"]);
            SectionHolder["1a"]["BorderSizePixel"] = 0;
            SectionHolder["1a"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
            SectionHolder["1a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
            SectionHolder["1a"]["Size"] = UDim2.new(1, 0, 0, 30);
            SectionHolder["1a"]["ClipsDescendants"] = true;
            SectionHolder["1a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            SectionHolder["1a"]["Position"] = UDim2.new(0.5468594431877136, 0, 0.23470667004585266, 0);
            SectionHolder["1a"]["Name"] = [[Section]];

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.UIStroke
            SectionHolder["1b"] = Instance.new("UIStroke", SectionHolder["1a"]);
            SectionHolder["1b"]["Color"] = Color3.fromRGB(96, 96, 96);
            SectionHolder["1b"]["Thickness"] = 2;
            SectionHolder["1b"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.UICorner
            SectionHolder["1c"] = Instance.new("UICorner", SectionHolder["1a"]);
            SectionHolder["1c"]["CornerRadius"] = UDim.new(0, 4);

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.Name
            SectionHolder["1d"] = Instance.new("Frame", SectionHolder["1a"]);
            SectionHolder["1d"]["BorderSizePixel"] = 0;
            SectionHolder["1d"]["BackgroundColor3"] = Color3.fromRGB(51, 51, 51);
            SectionHolder["1d"]["Size"] = UDim2.new(1, 0, 0, 30);
            SectionHolder["1d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            SectionHolder["1d"]["Name"] = [[Name]];

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.Name.UIPadding
            SectionHolder["1e"] = Instance.new("UIPadding", SectionHolder["1d"]);
            SectionHolder["1e"]["PaddingLeft"] = UDim.new(0, -5);

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.Name.LabelName
            SectionHolder["1f"] = Instance.new("TextLabel", SectionHolder["1d"]);
            SectionHolder["1f"]["TextWrapped"] = true;
            SectionHolder["1f"]["BorderSizePixel"] = 0;
            SectionHolder["1f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
            SectionHolder["1f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
            SectionHolder["1f"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
            SectionHolder["1f"]["TextSize"] = 18;
            SectionHolder["1f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
            SectionHolder["1f"]["AnchorPoint"] = Vector2.new(0.5, 0);
            SectionHolder["1f"]["Size"] = UDim2.new(0, 190, 0, 20);
            SectionHolder["1f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            SectionHolder["1f"]["Text"] = SettingsSection.name;
            SectionHolder["1f"]["Name"] = [[LabelName]];
            SectionHolder["1f"]["BackgroundTransparency"] = 2;
            SectionHolder["1f"]["Position"] = UDim2.new(0, 115, 0, 5);




                                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["46"]
                                    SectionHolder["5h"] = Instance.new("ImageButton",  SectionHolder["1d"]);
                                    SectionHolder["5h"]["BorderSizePixel"] = 0;
                                    SectionHolder["5h"]["ImageColor3"] = Color3.fromRGB(151, 151, 151);
                                    SectionHolder["5h"]["LayoutOrder"] = 9;
                                    SectionHolder["5h"]["AnchorPoint"] = Vector2.new(0, 0);
                                    SectionHolder["5h"]["Image"] = [[rbxassetid://3926305904]];
                                    SectionHolder["5h"]["ImageRectSize"] = Vector2.new(36, 36);
                                    SectionHolder["5h"]["Size"] = UDim2.new(0, 32, 0, 28);
                                    SectionHolder["5h"]["Name"] = [[Toggle]];
                                    SectionHolder["5h"]["ImageRectOffset"] = Vector2.new(564, 284);
                                    SectionHolder["5h"]["Position"] = UDim2.new(0.8199999928474426, 0, 0, 0);
                                    SectionHolder["5h"]["BackgroundTransparency"] = 1;

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.Name.UICorner
            SectionHolder["20"] = Instance.new("UICorner", SectionHolder["1d"]);
            SectionHolder["20"]["CornerRadius"] = UDim.new(0, 4);

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.Name.Line
            SectionHolder["21"] = Instance.new("Frame", SectionHolder["1d"]);
            SectionHolder["21"]["BorderSizePixel"] = 0;
            SectionHolder["21"]["BackgroundColor3"] = Color3.fromRGB(51, 51, 51);
            SectionHolder["21"]["Size"] = UDim2.new(0.9750587940216064, 0, -0.800000011920929, 30);
            SectionHolder["21"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            SectionHolder["21"]["Position"] = UDim2.new(0.0249412190169096, 0, 0.8333333134651184, 0);
            SectionHolder["21"]["Name"] = [[Line]];

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.UIListLayout
            SectionHolder["22"] = Instance.new("UIListLayout", SectionHolder["1a"]);
            SectionHolder["22"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
            SectionHolder["22"]["Padding"] = UDim.new(0, 6);
            SectionHolder["22"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


            SectionHolder["22"] :GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                SectionHolder["1a"].Size = UDim2.new(1, 0, 0,  SectionHolder["22"].AbsoluteContentSize.Y + 38)
            end)
        end  
            


        if SettingsSection.OpenSection then
            SectionHolder["5h"].Visible = true
        else
            SectionHolder["5h"].Visible = false
        end
        SectionHolder["5h"].MouseButton1Click:Connect(function()
                        if SectionHolder["1a"].Size ~= UDim2.new(1, 0, 0, 30) then
                    tweenservice:Create(SectionHolder["1a"], TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size = UDim2.new(1, 0, 0, 30)}):Play()
                    tweenservice:Create( SectionHolder["5h"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Rotation = 180}):Play()	

                else
                            tweenservice:Create(SectionHolder["1a"], TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size =UDim2.new(1, 0, 0,  SectionHolder["22"].AbsoluteContentSize.Y + 38)}):Play()

                            tweenservice:Create( SectionHolder["5h"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Rotation = 0}):Play()	


                        end
                end)


                function SectionHolder:AddToggle(ToggleSettings)
                    local Toggle = {
                        hover = false,
                        MouseDown = false,
                    }
        
                    --render 
                    do
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive
                        Toggle["2f"] = Instance.new("TextButton",    SectionHolder["1a"] );
                        Toggle["2f"]["BorderSizePixel"] = 0;
                        Toggle["2f"].Text = ""
                        Toggle["2f"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                        Toggle["2f"]["Size"] = UDim2.new(0.9, 0, 0, 30);
                        Toggle["2f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        Toggle["2f"]["Name"] = [[ToggleInactive]];
                        Toggle["2f"]["Visible"] = true;
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.UIStroke
                        Toggle["30"] = Instance.new("UIStroke", Toggle["2f"]);
                        Toggle["30"]["Color"] = Color3.fromRGB(118, 117, 117);
                        Toggle["30"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.UIPadding
                        Toggle["31"] = Instance.new("UIPadding", Toggle["2f"]);
                        Toggle["31"]["PaddingLeft"] = UDim.new(0, 1);
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.UICorner
                        Toggle["32"] = Instance.new("UICorner", Toggle["2f"]);
        
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.CheckmarkHolder
                        Toggle["33"] = Instance.new("Frame", Toggle["2f"]);
                        Toggle["33"]["BorderSizePixel"] = 0;
                        Toggle["33"]["BackgroundColor3"] = Color3.fromRGB(66, 66, 66);
                        Toggle["33"]["AnchorPoint"] = Vector2.new(1, 0.5);
                        Toggle["33"]["Size"] = UDim2.new(0, 17, 0, 17);
                        Toggle["33"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        Toggle["33"]["Position"] = UDim2.new(1, -10, 0.5, 0);
                        Toggle["33"]["Name"] = [[CheckmarkHolder]];
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.CheckmarkHolder.UIStroke
                        Toggle["34"] = Instance.new("UIStroke", Toggle["33"]);
                        Toggle["34"]["Color"] = Color3.fromRGB(118, 117, 117);
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.CheckmarkHolder.UICorner
                        Toggle["35"] = Instance.new("UICorner", Toggle["33"]);
                        Toggle["35"]["CornerRadius"] = UDim.new(0, 2);
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.CheckmarkHolder.Checkmark
                        Toggle["36"] = Instance.new("ImageLabel", Toggle["33"]);
                        Toggle["36"]["BorderSizePixel"] = 0;
                        Toggle["36"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        Toggle["36"]["Visible"] = true;
                        Toggle["36"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        Toggle["36"]["Image"] = [[rbxassetid://14044220049]];
                        Toggle["36"]["Size"] = UDim2.new(1, 0, 1, 0);
                        Toggle["36"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        Toggle["36"]["Name"] = [[Checkmark]];
                        Toggle["36"]["BackgroundTransparency"] = 1;
                        Toggle["36"]["ImageTransparency"] = 1;
                        Toggle["36"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.Title
                        Toggle["37"] = Instance.new("TextLabel", Toggle["2f"]);
                        Toggle["37"]["TextWrapped"] = true;
                        Toggle["37"]["BorderSizePixel"] = 0;
                        Toggle["37"]["RichText"] = true;
                        Toggle["37"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        Toggle["37"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                        Toggle["37"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                        Toggle["37"]["TextSize"] = 20;
                        Toggle["37"]["TextScaled"] = true;
        
                        Toggle["37"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                        Toggle["37"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        Toggle["37"]["Size"] = UDim2.new(0, 100, 0, 20);
                        
                        Toggle["37"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        Toggle["37"]["Text"] = ToggleSettings.Name;
                        Toggle["37"]["Name"] = [[Title]];
                        Toggle["37"]["BackgroundTransparency"] = 2;
                        Toggle["37"]["Position"] = UDim2.new(0.29, 0, 0.5, 0);
                        

        
                    end
        
                    if not ToggleSettings.CurrentValue then
                        Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(66, 66, 66)})
                        Library:tween(Toggle["36"],{ImageTransparency = 1})
                else
                    Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(36, 135, 0)})
                    Library:tween(Toggle["36"],{ImageTransparency = 0})
        
                    end
        
                    Toggle["2f"].MouseEnter:Connect(function()
                        Toggle.hover = true
                        Library:tween(Toggle["30"], {Color = Color3.fromRGB(56, 56, 56)})
                    end) 
        
                    Toggle["2f"].MouseLeave:Connect(function()
                        Toggle.hover = false
                        if not Toggle.MouseDown  then
                            Library:tween(Toggle["30"], {Color = Color3.fromRGB(118, 117, 117)})
        
                        end 
                    end)
        
                    uis.InputBegan:Connect(function(input,gpe)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 and Gui["1"].Enabled and Toggle.hover then						
                            Toggle.MouseDown = true
                            Library:tween(Toggle["30"], {Color = Color3.fromRGB(200, 200, 200)})
                            Library:tween(Toggle["2f"], {BackgroundColor3 = Color3.fromRGB(95,95,95)})
                        end
        
                    end)
        
                    uis.InputEnded:Connect(function(input,gpe)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Toggle.MouseDown = false
                            if Toggle.hover then
                                Library:tween(Toggle["30"], {Color = Color3.fromRGB(56, 56, 56)})
                                Library:tween(Toggle["2f"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
        
                            else
                                Library:tween(Toggle["30"], {Color = Color3.fromRGB(118, 117, 117)})
                                Library:tween(Toggle["2f"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                            end
                        end
        
                    end)
        
                    Toggle["2f"].MouseButton1Click:Connect(function()
                        if ToggleSettings.CurrentValue then
                            ToggleSettings.CurrentValue = false
                            Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(66, 66, 66)})
                            Library:tween(Toggle["36"],{ImageTransparency = 1})
                    else
                            ToggleSettings.CurrentValue = true
                            Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(36, 135, 0)})
                            Library:tween(Toggle["36"],{ImageTransparency = 0})
                            end
        
                        local Success, Response = pcall(function()
                            ToggleSettings.callback(ToggleSettings.CurrentValue)
                        end)
                        if not Success then
                            Toggle["37"].Text = "Callback Error"
                            print("Zepohy | "..ToggleSettings.Name.." Callback Error " ..tostring(Response))
                            wait(0.5)
                            Toggle["37"].Text = ToggleSettings.Name
                            end
        
        
                        SaveConfiguration()
                    end)
        
                    function ToggleSettings:Set(NewValue)
        
                        if NewValue then
                            ToggleSettings.CurrentValue = true
                            Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(36, 135, 0)})
                            Library:tween(Toggle["36"],{ImageTransparency = 0})
                      else
                            ToggleSettings.CurrentValue = false
                            Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(66, 66, 66)})
                            Library:tween(Toggle["36"],{ImageTransparency = 1})
                                end
                        local Success, Response = pcall(function()
                            ToggleSettings.callback(ToggleSettings.CurrentValue)
                        end)
                        if not Success then
                            Toggle["37"].Text = "Callback Error"
                            print("Zephy | "..ToggleSettings.Name.." Callback Error " ..tostring(Response))
                            wait(0.5)
                            Toggle["37"].Text = ToggleSettings.Name
                            end
                        SaveConfiguration()
                    end
        
                    if Settings.ConfigurationSaving then
                        if Settings.ConfigurationSaving.Enabled and ToggleSettings.Flag then
                            Library.Flags[ToggleSettings.Flag] = ToggleSettings
                        end
                    end
        
                    return ToggleSettings
                end
        
                -- Dropdown
                function SectionHolder:AddDropDown(DropdownSettings)
                    local CreateDropDown = {
                        hover = false,
                        MouseDown = false,
                    }
                    do

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Dropdown
                        CreateDropDown["38"] = Instance.new("Frame", SectionHolder["1a"]);
                        CreateDropDown["38"]["BorderSizePixel"] = 0;
                        CreateDropDown["38"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                        CreateDropDown["38"]["Size"] = UDim2.new(0.9, 0, 0, 30);
                        CreateDropDown["38"]["ClipsDescendants"] = true;
                        CreateDropDown["38"]["Position"] = UDim2.new(-0.11669977754354477, 0, 0.39556998014450073, 0);
                        CreateDropDown["38"]["Name"] = [[Dropdown]];

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["39"]
                        CreateDropDown["39"] = Instance.new("TextLabel", CreateDropDown["38"]);
                        CreateDropDown["39"]["TextWrapped"] = true;
                        CreateDropDown["39"]["ZIndex"] = 3;
                        CreateDropDown["39"]["BorderSizePixel"] = 0;
                        CreateDropDown["39"]["TextScaled"] = true;
                        CreateDropDown["39"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        CreateDropDown["39"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                        CreateDropDown["39"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
                        CreateDropDown["39"]["TextSize"] = 14;
                        CreateDropDown["39"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
                        CreateDropDown["39"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        CreateDropDown["39"]["Size"] = UDim2.new(0, 100, 0, 20);
                        CreateDropDown["39"]["Text"] = DropdownSettings.Name;
                        CreateDropDown["39"]["Name"] = [[Title]];
                        CreateDropDown["39"]["BackgroundTransparency"] = 1;
                        CreateDropDown["39"]["Position"] = UDim2.new(0, 56, 0, 15);

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"]
                        CreateDropDown["3a"] = Instance.new("ScrollingFrame", CreateDropDown["38"]);
                        CreateDropDown["3a"]["Active"] = true;
                        CreateDropDown["3a"]["BorderSizePixel"] = 0;
                        CreateDropDown["3a"]["ScrollBarImageTransparency"] = 0.699999988079071;
                        CreateDropDown["3a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        CreateDropDown["3a"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
                        CreateDropDown["3a"]["BackgroundTransparency"] = 1;
                        CreateDropDown["3a"]["Size"] = UDim2.new(1, 0, 1, 0);
                        CreateDropDown["3a"]["ScrollBarImageColor3"] = Color3.fromRGB(241, 241, 241);
                        CreateDropDown["3a"]["ScrollBarThickness"] = 3;
                        CreateDropDown["3a"]["Position"] = UDim2.new(0, 0, 0, 38);
                        CreateDropDown["3a"]["Name"] = [[List]];

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].UIListLayout
                        CreateDropDown["3b"] = Instance.new("UIListLayout", CreateDropDown["3a"]);
                        CreateDropDown["3b"]["Padding"] = UDim.new(0, 5);
                        CreateDropDown["3b"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
                        CreateDropDown["3b"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;

                        CreateDropDown["3b"]:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                            CreateDropDown["3a"].CanvasSize = UDim2.new(1, 0, 0,  CreateDropDown["3b"].AbsoluteContentSize.Y + 35)
                        end)
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Placeholder
                        CreateDropDown["3c"] = Instance.new("Frame", CreateDropDown["3a"]);
                        CreateDropDown["3c"]["BorderSizePixel"] = 0;
                        CreateDropDown["3c"]["BackgroundColor3"] = Color3.fromRGB(31, 31, 31);
                        CreateDropDown["3c"]["LayoutOrder"] = -100;
                        CreateDropDown["3c"]["Position"] = UDim2.new(0.39247313141822815, 0, 0, 0);
                        CreateDropDown["3c"]["Name"] = [[Placeholder]];

                        

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].UIPadding
                        CreateDropDown["43"] = Instance.new("UIPadding", CreateDropDown["3a"]);
                        CreateDropDown["43"]["PaddingRight"] = UDim.new(0, 5);
                        CreateDropDown["43"]["PaddingLeft"] = UDim.new(0, 5);

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["44"]
                        CreateDropDown["44"] = Instance.new("TextLabel", CreateDropDown["38"]);
                        CreateDropDown["44"]["TextWrapped"] = true;
                        CreateDropDown["44"]["BorderSizePixel"] = 0;
                        CreateDropDown["44"]["TextScaled"] = true;
                        CreateDropDown["44"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        CreateDropDown["44"]["TextXAlignment"] = Enum.TextXAlignment.Right;
                        CreateDropDown["44"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
                        CreateDropDown["44"]["TextSize"] = 14;
                        CreateDropDown["44"]["TextColor3"] = Color3.fromRGB(151, 151, 151);
                        CreateDropDown["44"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        CreateDropDown["44"]["Size"] = UDim2.new(0, 55, 0, 25);
                        CreateDropDown["44"]["Text"] = [[Option #1]];
                        CreateDropDown["44"]["Name"] = [[Selected]];
                        CreateDropDown["44"]["BackgroundTransparency"] = 1;
                        CreateDropDown["44"]["Position"] = UDim2.new(0, 135, 0, 15);

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["44"].UITextSizeConstraint
                        CreateDropDown["45"] = Instance.new("UITextSizeConstraint", CreateDropDown["44"]);
                        CreateDropDown["45"]["MaxTextSize"] = 14;

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["46"]
                        CreateDropDown["46"] = Instance.new("ImageButton", CreateDropDown["38"]);
                        CreateDropDown["46"]["BorderSizePixel"] = 0;
                        CreateDropDown["46"]["ImageColor3"] = Color3.fromRGB(151, 151, 151);
                        CreateDropDown["46"]["LayoutOrder"] = 9;
                        CreateDropDown["46"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        CreateDropDown["46"]["Image"] = [[rbxassetid://3926305904]];
                        CreateDropDown["46"]["ImageRectSize"] = Vector2.new(36, 36);
                        CreateDropDown["46"]["Size"] = UDim2.new(0, 32, 0, 28);
                        CreateDropDown["46"]["Name"] = [[Toggle]];
                        CreateDropDown["46"]["ImageRectOffset"] = Vector2.new(564, 284);
                        CreateDropDown["46"]["Position"] = UDim2.new(0, 185, 0, 15);
                        CreateDropDown["46"]["BackgroundTransparency"] = 1;

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["47"]
                        CreateDropDown["47"] = Instance.new("TextButton", CreateDropDown["38"]);
                        CreateDropDown["47"]["ZIndex"] = 5;
                        CreateDropDown["47"]["BorderSizePixel"] = 0;
                        CreateDropDown["47"]["TextTransparency"] = 1;
                        CreateDropDown["47"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        CreateDropDown["47"]["TextSize"] = 14;
                        CreateDropDown["47"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                        CreateDropDown["47"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
                        CreateDropDown["47"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        CreateDropDown["47"]["Size"] = UDim2.new(1, 0, 1, 0);
                        CreateDropDown["47"]["Name"] = [[Interact]];
                        CreateDropDown["47"]["Text"] = [[]];
                        CreateDropDown["47"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
                        CreateDropDown["47"]["BackgroundTransparency"] = 1;

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Dropdown.UICorner
                        CreateDropDown["48"] = Instance.new("UICorner", CreateDropDown["38"]);


                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Dropdown.UIPadding
                        CreateDropDown["49"] = Instance.new("UIPadding", CreateDropDown["38"]);
                        CreateDropDown["49"]["PaddingLeft"] = UDim.new(0, 1);

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["4a"]
                        CreateDropDown["4a"] = Instance.new("UIStroke", CreateDropDown["38"]);
                        CreateDropDown["4a"]["Color"] = Color3.fromRGB(118, 117, 117);
                        CreateDropDown["4a"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;


                    end

                    CreateDropDown["3a"].Visible = false

                    if typeof(DropdownSettings.CurrentOption) == "string" then
                        DropdownSettings.CurrentOption = {DropdownSettings.CurrentOption}
                    end

                    if not DropdownSettings.MultipleOptions then
                        DropdownSettings.CurrentOption = {DropdownSettings.CurrentOption[1]}
                    end

                    if DropdownSettings.MultipleOptions then
                        if #DropdownSettings.CurrentOption == 1 then
                            CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                        elseif #DropdownSettings.CurrentOption == 0 then
                            CreateDropDown["44"].Text = "None"
                        else
                            CreateDropDown["44"].Text = "Various"
                        end
                    else
                        CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                    end


                    CreateDropDown["38"].BackgroundTransparency = 1
                    CreateDropDown["4a"].Transparency = 1
                    CreateDropDown["39"].TextTransparency = 1

                    CreateDropDown["38"].Size = UDim2.new(0.9, 0, 0, 30)

                    tweenservice:Create(CreateDropDown["38"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {BackgroundTransparency = 0}):Play()
                    tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                    tweenservice:Create(CreateDropDown["39"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {TextTransparency = 0}):Play()	

                    for _, ununusedoption in ipairs(CreateDropDown["3a"]:GetChildren()) do
                        if ununusedoption.ClassName == "Frame" and ununusedoption.Name ~= "Placeholder" then
                            ununusedoption:Destroy()
                        end
                    end

                    CreateDropDown["46"].Rotation = 180

                    CreateDropDown["47"].MouseButton1Click:Connect(function()
                        tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.4, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                        wait(0.1)
                        tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.4, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                        if Debounce then return end
                        if CreateDropDown["3a"].Visible then
                            Debounce = true
                            tweenservice:Create(CreateDropDown["38"], TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size = UDim2.new(0.9, 0, 0, 30)}):Play()
                            for _, DropdownOpt in ipairs(CreateDropDown["3a"]:GetChildren()) do
                                if DropdownOpt.ClassName == "Frame" and DropdownOpt.Name ~= "Placeholder" then
                                    tweenservice:Create(DropdownOpt, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundTransparency = 1}):Play()
                                    tweenservice:Create(DropdownOpt.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                                    tweenservice:Create(DropdownOpt.Title, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()
                                end
                            end
                            tweenservice:Create(CreateDropDown["3a"], TweenInfo.new(0.3, Enum.EasingStyle.Quint), {ScrollBarImageTransparency = 1}):Play()
                            tweenservice:Create(CreateDropDown["46"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Rotation = 180}):Play()	
                            wait(0.35)
                            CreateDropDown["3a"].Visible = false
                            Debounce = false
                        else
                            tweenservice:Create(CreateDropDown["38"], TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size = UDim2.new(0.9, 0, 0, 180)}):Play()
                            CreateDropDown["3a"].Visible = true
                            tweenservice:Create(CreateDropDown["3a"], TweenInfo.new(0.3, Enum.EasingStyle.Quint), {ScrollBarImageTransparency = 0.7}):Play()
                            tweenservice:Create(CreateDropDown["46"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Rotation = 0}):Play()	
                            for _, DropdownOpt in ipairs(CreateDropDown["3a"]:GetChildren()) do
                                if DropdownOpt.ClassName == "Frame" and DropdownOpt.Name ~= "Placeholder" then
                                    tweenservice:Create(DropdownOpt, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundTransparency = 0}):Play()
                                    tweenservice:Create(DropdownOpt.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                                    tweenservice:Create(DropdownOpt.Title, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {TextTransparency = 0}):Play()
                                end
                            end
                        end
                    end)
                    
                    
                    CreateDropDown["38"].MouseEnter:Connect(function()
                        if not CreateDropDown["3a"].Visible then
                            CreateDropDown.hover = true
                            Library:tween(CreateDropDown["4a"], {Color = Color3.fromRGB(56, 56, 56)})
                            Library:tween(CreateDropDown["38"], {BackgroundColor3 = Color3.fromRGB(49, 49, 49)})

                        end
                    end)

                    CreateDropDown["38"].MouseLeave:Connect(function()
                        CreateDropDown.hover = false
                        if not CreateDropDown.MouseDown  then
                            Library:tween(CreateDropDown["4a"], {Color = Color3.fromRGB(95,95,95)})
                            Library:tween(CreateDropDown["38"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})

                        end

                    end)

                    



                    for _, Option in ipairs(DropdownSettings.Options) do
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template
                        CreateDropDown["3d"] = Instance.new("Frame", CreateDropDown["3a"]);
                        CreateDropDown["3d"]["BorderSizePixel"] = 0;
                        CreateDropDown["3d"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                        CreateDropDown["3d"]["AnchorPoint"] = Vector2.new(0, 1);
                        CreateDropDown["3d"]["Size"] = UDim2.new(0.95, 0, 0, 25);
                        CreateDropDown["3d"]["Position"] = UDim2.new(0, 0, 0.0396825410425663, 0);
                        CreateDropDown["3d"]["Name"] = [[Template]];

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template.Title
                        CreateDropDown["3e"] = Instance.new("TextLabel", CreateDropDown["3d"]);
                        CreateDropDown["3e"]["TextWrapped"] = true;
                        CreateDropDown["3e"]["BorderSizePixel"] = 0;
                        CreateDropDown["3e"]["TextScaled"] = true;
                        CreateDropDown["3e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        CreateDropDown["3e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                        CreateDropDown["3e"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
                        CreateDropDown["3e"]["TextSize"] = 14;
                        CreateDropDown["3e"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
                        CreateDropDown["3e"]["AnchorPoint"] = Vector2.new(0, 0.5);
                        CreateDropDown["3e"]["Size"] = UDim2.new(0.5, 0, 0.699999988079071, 0);
                        CreateDropDown["3e"]["Text"] = Option;
                        CreateDropDown["3e"]["Name"] = [[Title]];
                        CreateDropDown["3e"]["BackgroundTransparency"] = 1;
                        CreateDropDown["3e"]["Position"] = UDim2.new(0, 0, 0.42100000381469727, 0);

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template.Interact
                        CreateDropDown["3f"] = Instance.new("TextButton", CreateDropDown["3d"]);
                        CreateDropDown["3f"]["ZIndex"] = 5;
                        CreateDropDown["3f"]["BorderSizePixel"] = 0;
                        CreateDropDown["3f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        CreateDropDown["3f"]["TextSize"] = 1;
                        CreateDropDown["3f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                        CreateDropDown["3f"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
                        CreateDropDown["3f"]["Size"] = UDim2.new(1, 0, 1, 0);
                        CreateDropDown["3f"]["Name"] = [[Interact]];
                        CreateDropDown["3f"]["Text"] = [[]];
                        CreateDropDown["3f"]["BackgroundTransparency"] = 1;

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template.UICorner
                        CreateDropDown["40"] = Instance.new("UICorner", CreateDropDown["3d"]);


                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template.UIPadding
                        CreateDropDown["41"] = Instance.new("UIPadding", CreateDropDown["3d"]);
                        CreateDropDown["41"]["PaddingTop"] = UDim.new(0, 1);
                        CreateDropDown["41"]["PaddingLeft"] = UDim.new(0, 5);

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template.UIStroke
                        CreateDropDown["42"] = Instance.new("UIStroke", CreateDropDown["3d"]);
                        CreateDropDown["42"]["Color"] = Color3.fromRGB(118, 117, 117);
                        

                        if DropdownSettings.CurrentOption == Option then
                            CreateDropDown["3d"].BackgroundColor3 = Color3.fromRGB(56, 56, 56)
                        end

                        CreateDropDown["3d"].BackgroundTransparency = 1
                        CreateDropDown["3d"].UIStroke.Transparency = 1
                        CreateDropDown["3d"].Title.TextTransparency = 1


                        CreateDropDown["3d"].Interact.ZIndex = 50
                        CreateDropDown["3d"].Interact.MouseButton1Click:Connect(function()
                            if not DropdownSettings.MultipleOptions and table.find(DropdownSettings.CurrentOption, Option) then 
                                return
                            end

                            if table.find(DropdownSettings.CurrentOption, Option) then
                                table.remove(DropdownSettings.CurrentOption, table.find(DropdownSettings.CurrentOption, Option))
                                if DropdownSettings.MultipleOptions then
                                    if #DropdownSettings.CurrentOption == 1 then
                                        CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                                    elseif #DropdownSettings.CurrentOption == 0 then
                                        CreateDropDown["44"].Text = "None"
                                    else
                                        CreateDropDown["44"].Text = "Various"
                                    end
                                else
                                    CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                                end
                            else
                                if not DropdownSettings.MultipleOptions then
                                    table.clear(DropdownSettings.CurrentOption)
                                end
                                table.insert(DropdownSettings.CurrentOption, Option)
                                if DropdownSettings.MultipleOptions then
                                    if #DropdownSettings.CurrentOption == 1 then
                                        CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                                    elseif #DropdownSettings.CurrentOption == 0 then
                                        CreateDropDown["44"].Text = "None"
                                    else
                                        CreateDropDown["44"].Text = "Various"
                                    end
                                else
                                    CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                                end
                                tweenservice:Create(CreateDropDown["3d"].UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                                tweenservice:Create(CreateDropDown["3d"], TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundColor3 = Color3.fromRGB(40, 40, 40)}):Play()
                                Debounce = true
                                wait(0.2)
                                tweenservice:Create(CreateDropDown["3d"].UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                            end


                            local Success, Response = pcall(function()
                                DropdownSettings.callback(DropdownSettings.CurrentOption)
                            end)

                            if not Success then
                                tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                                CreateDropDown["39"].Text = "Callback Error"
                                print("Rayfield | "..DropdownSettings.Name.." Callback Error " ..tostring(Response))
                                wait(0.5)
                                CreateDropDown["39"].Text = DropdownSettings.Name
                                tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                            end

                            for _, droption in ipairs(CreateDropDown["3a"]:GetChildren()) do
                                if droption.ClassName == "Frame" and droption.Name ~= "Placeholder" and not table.find(DropdownSettings.CurrentOption, droption.Name) then
                                    tweenservice:Create(droption, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
                                end
                            end
                            if not DropdownSettings.MultipleOptions then
                                wait(0.1)
                                tweenservice:Create(CreateDropDown["38"], TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size = UDim2.new(0.9, 0, 0, 30)}):Play()
                                for _, DropdownOpt in ipairs(CreateDropDown["3a"]:GetChildren()) do
                                    if DropdownOpt.ClassName == "Frame" and DropdownOpt.Name ~= "Placeholder" then
                                        tweenservice:Create(DropdownOpt, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundTransparency = 1}):Play()
                                        tweenservice:Create(DropdownOpt.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                                        tweenservice:Create(DropdownOpt.Title, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()
                                    end
                                end
                                tweenservice:Create(CreateDropDown["3a"], TweenInfo.new(0.3, Enum.EasingStyle.Quint), {ScrollBarImageTransparency = 1}):Play()
                                tweenservice:Create(CreateDropDown["46"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Rotation = 180}):Play()	
                                wait(0.35)
                                CreateDropDown["3a"].Visible = false
                            end
                            Debounce = false	
                            SaveConfiguration()
                        end)
                    end

                    for _, droption in ipairs(CreateDropDown["3a"]:GetChildren()) do
                        if droption.ClassName == "Frame" and droption.Name ~= "Placeholder" then
                            if not table.find(DropdownSettings.CurrentOption, droption.Name) then
                                droption.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                            else
                                droption.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                            end
                        end
                    end

                    function DropdownSettings:Set(NewOption)

                        DropdownSettings.CurrentOption = NewOption

                        if typeof(DropdownSettings.CurrentOption) == "string" then
                            DropdownSettings.CurrentOption = {DropdownSettings.CurrentOption}
                        end

                        if not DropdownSettings.MultipleOptions then
                            DropdownSettings.CurrentOption = {DropdownSettings.CurrentOption[1]}
                        end

                        if DropdownSettings.MultipleOptions then
                            if #DropdownSettings.CurrentOption == 1 then
                                CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                            elseif #DropdownSettings.CurrentOption == 0 then
                                CreateDropDown["44"].Text = "None"
                            else
                                CreateDropDown["44"].Text = "Various"
                            end
                        else
                            CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                        end


                        local Success, Response = pcall(function()
                            DropdownSettings.callback(NewOption)
                        end)
                        if not Success then
                            tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                            CreateDropDown["39"].Text = "Callback Error"
                            print("Zephy | "..DropdownSettings.Name.." Callback Error " ..tostring(Response))
                            wait(0.5)
                            CreateDropDown["39"].Text = DropdownSettings.Name
                            tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                        end

                        for _, droption in ipairs(CreateDropDown["3a"]:GetChildren()) do
                            if droption.ClassName == "Frame" and droption.Name ~= "Placeholder" then
                                if not table.find(DropdownSettings.CurrentOption, droption.Name) then
                                    droption.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                                else
                                    droption.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                                end
                            end
                        end
                        --SaveConfiguration()
                    end
                    if Settings.ConfigurationSaving then
                        if Settings.ConfigurationSaving.Enabled and DropdownSettings.Flag then
                            Library.Flags[DropdownSettings.Flag] = DropdownSettings
                        end
                    end

                    return DropdownSettings
                end
                
                function SectionHolder:AddButton(ButtonSetting)
        
        
                    local Button = {
                        hover = false,
                        MouseDown = false,
                    }
        
                    --render 
                    do
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive
                        Button["9f"] = Instance.new("Frame",    SectionHolder["1a"] );
                        Button["9f"]["BorderSizePixel"] = 0;
                        Button["9f"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                        Button["9f"]["Size"] =UDim2.new(0.9, 0, 0, 30);
                        Button["9f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        Button["9f"]["Name"] = [[ButtonInactive]];
                        Button["9f"]["Visible"] = true;
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive.UIStroke
                        Button["8d"] = Instance.new("UIStroke", Button["9f"]);
                        Button["8d"]["Color"] = Color3.fromRGB(118, 117, 117);
                        Button["8d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive.UIPadding
                        Button["7c"] = Instance.new("UIPadding", Button["9f"]);
                        Button["7c"]["PaddingLeft"] = UDim.new(0, 1);
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive.UICorner
                        Button["6c"] = Instance.new("UICorner", Button["9f"]);
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive.Title
                        Button["5c"] = Instance.new("TextLabel", Button["9f"]);
                        Button["5c"]["TextWrapped"] = true;
                        Button["5c"]["BorderSizePixel"] = 0;
                        Button["5c"]["RichText"] = true;
                        Button["5c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        Button["5c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                        Button["5c"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                        Button["5c"]["TextSize"] = 20;
                        Button["5c"]["TextScaled"] = true;
        
                        Button["5c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                        Button["5c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        Button["5c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        Button["5c"]["Text"] = ButtonSetting.Name;
                        Button["5c"]["Name"] = [[Title]];
                        Button["5c"]["BackgroundTransparency"] = 2;
                        Button["5c"]["Size"] = UDim2.new(0, 100, 0, 20);
                        Button["5c"]["Position"] = UDim2.new(0.29, 0, 0.5, 0);
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive.button
                        Button["4c"] = Instance.new("TextLabel", Button["9f"]);
                        Button["4c"]["TextWrapped"] = true;
                        Button["4c"]["BorderSizePixel"] = 0;
                        Button["4c"]["RichText"] = true;
                        Button["4c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        Button["4c"]["TextXAlignment"] = Enum.TextXAlignment.Center;
                        Button["4c"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                        Button["4c"]["TextSize"] = 15;
                        Button["4c"]["TextScaled"] = false;
                        Button["4c"]["TextColor3"] = Color3.fromRGB(104, 104, 104);
                        Button["4c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        Button["4c"]["Size"] = UDim2.new(0, 100, 0, 20);
                        Button["4c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        Button["4c"]["Text"] = [[Click]];
                        Button["4c"]["Name"] = [[Button]];
                        Button["4c"]["BackgroundTransparency"] = 1;
                        Button["4c"]["Position"] = UDim2.new(0.8, 0,0.5, 0);
        
                    end
        
                    --logic
                    do
        
                        Button["9f"].MouseEnter:Connect(function()
                            Button.hover = true
                            Library:tween(Button["8d"], {Color = Color3.fromRGB(56, 56, 56)})
        
        
                        end) 
        
                        Button["9f"].MouseLeave:Connect(function()
                            Button.hover = false
                            if not Button.MouseDown  then
                                Library:tween(Button["8d"], {Color = Color3.fromRGB(118, 117, 117)})
        
                            end 
                        end)
                        uis.InputBegan:Connect(function(input,gpe)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 and Gui["1"].Enabled and Button.hover then						
                                Button.MouseDown = true
                                Library:tween(Button["8d"], {Color = Color3.fromRGB(200, 200, 200)})
                                Library:tween(Button["9f"], {BackgroundColor3 = Color3.fromRGB(95,95,95)})
                                ButtonSetting.callback()
                            end
        
                        end)
        
                        uis.InputEnded:Connect(function(input,gpe)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                Button.MouseDown = false
                                if Button.hover then
                                    Library:tween(Button["8d"], {Color = Color3.fromRGB(56, 56, 56)})
                                    Library:tween(Button["9f"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
        
                                else
                                    Library:tween(Button["8d"], {Color = Color3.fromRGB(118, 117, 117)})
                                    Library:tween(Button["9f"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                                end
                            end
        
                        end)
        
                    end
        
                    return Button
        
                end
                -- Keybind
        
                function SectionHolder:CreateKeybind(KeybindSettings)
        
                    local CheckingForKey = false
                    local CreateKeybinds = {
                        hover = false,
                        MouseDown = false,
                    }
                    do
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind
                        CreateKeybinds["1c"] = Instance.new("TextButton",    SectionHolder["1a"] );
                        CreateKeybinds["1c"]["BorderSizePixel"] = 0;
                        CreateKeybinds["1c"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                        CreateKeybinds["1c"]["Size"] = UDim2.new(0.9, 0, 0, 30);
                        CreateKeybinds["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        CreateKeybinds["1c"]["Name"] = [[KeyBind]];
                        CreateKeybinds["1c"]["Visible"] = true;
                        CreateKeybinds["1c"]["Text"] = ""
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.UIStroke
                        CreateKeybinds["1d"] = Instance.new("UIStroke", CreateKeybinds["1c"]);
                        CreateKeybinds["1d"]["Color"] = Color3.fromRGB(118, 117, 117);
                        CreateKeybinds["1d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.UIPadding
                        CreateKeybinds["1e"] = Instance.new("UIPadding", CreateKeybinds["1c"]);
                        CreateKeybinds["1e"]["PaddingLeft"] = UDim.new(0, 1);
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.UICorner
                        CreateKeybinds["1f"] = Instance.new("UICorner", CreateKeybinds["1c"]);
        
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.TextBox
                        CreateKeybinds["20"] = Instance.new("TextBox", CreateKeybinds["1c"]);
                        CreateKeybinds["20"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
                        CreateKeybinds["20"]["BorderSizePixel"] = 0;
                        CreateKeybinds["20"]["RichText"] = true;
                        CreateKeybinds["20"]["TextSize"] = 20;
                        CreateKeybinds["20"]["TextWrapped"] = true;
                        CreateKeybinds["20"]["TextScaled"] = false;
                        CreateKeybinds["20"]["BackgroundColor3"] = Color3.fromRGB(127, 127, 127);
                        CreateKeybinds["20"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                        CreateKeybinds["20"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                        CreateKeybinds["20"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        CreateKeybinds["20"]["BackgroundTransparency"] = 1;
                        CreateKeybinds["20"]["PlaceholderText"] = "None";
                        CreateKeybinds["20"]["Size"] = UDim2.new(0.30000001192092896, 0, 0.800000011920929, 0);
                        CreateKeybinds["20"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        CreateKeybinds["20"]["Text"] = KeybindSettings.CurrentKeybind;
                        CreateKeybinds["20"]["Position"] = UDim2.new(0.800000011920929, 0, 0.5, 0);


                        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.TextBox.UICorner
                        CreateKeybinds["21"] = Instance.new("UICorner", CreateKeybinds["20"]);
        
        
                        -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.Title
                        CreateKeybinds["22"] = Instance.new("TextLabel", CreateKeybinds["1c"]);
                        CreateKeybinds["22"]["TextWrapped"] = true;
                        CreateKeybinds["22"]["BorderSizePixel"] = 0;
                        CreateKeybinds["22"]["RichText"] = true;
                        CreateKeybinds["22"]["TextScaled"] = true;
                        CreateKeybinds["22"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        CreateKeybinds["22"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                        CreateKeybinds["22"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                        CreateKeybinds["22"]["TextSize"] = 20;
                        CreateKeybinds["22"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                        CreateKeybinds["22"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        CreateKeybinds["22"]["Size"] = UDim2.new(0, 100, 0, 20);
                        CreateKeybinds["22"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        CreateKeybinds["22"]["Text"] = KeybindSettings.Name;
                        CreateKeybinds["22"]["Name"] = [[Title]];
                        CreateKeybinds["22"]["BackgroundTransparency"] = 2;
                        CreateKeybinds["22"]["Position"] = UDim2.new(0.3199999928474426, 0, 0.5, 0);
        

                    end
                    CreateKeybinds["20"].Text = KeybindSettings.CurrentKeybind
                    CreateKeybinds["20"].Focused:Connect(function()
                        CheckingForKey = true
                        CreateKeybinds["20"].Text = ""
                    end)
        
                    
                    CreateKeybinds["20"].FocusLost:Connect(function()
                        CheckingForKey = false
                        if 	CreateKeybinds["20"].Text == nil or "" then
                            CreateKeybinds["20"].Text = KeybindSettings.CurrentKeybind
                            SaveConfiguration()
                        end
                    end)
        
                    CreateKeybinds["1c"].MouseEnter:Connect(function()
                        CreateKeybinds.hover = true
                        Library:tween(CreateKeybinds["1d"], {Color = Color3.fromRGB(56, 56, 56)})
        
                    end)
        
                    CreateKeybinds["1c"].MouseLeave:Connect(function()
                        CreateKeybinds.hover = false
                        Library:tween(CreateKeybinds["1d"], {Color = Color3.fromRGB(118, 117, 117)})
                    end)
        
        
                    uis.InputBegan:Connect(function(input, processed)
                        if CheckingForKey then
                            if input.KeyCode ~= Enum.KeyCode.Unknown and input.KeyCode ~= Enum.KeyCode.Equals then
                                local SplitMessage = string.split(tostring(input.KeyCode), ".")
                                local NewKeyNoEnum = SplitMessage[3]
                                CreateKeybinds["20"].Text = tostring(NewKeyNoEnum)
                                KeybindSettings.CurrentKeybind = tostring(NewKeyNoEnum)
                                CreateKeybinds["20"]:ReleaseFocus()
                                SaveConfiguration()
                            end
                        elseif KeybindSettings.CurrentKeybind ~= "None" and (input.KeyCode == Enum.KeyCode[KeybindSettings.CurrentKeybind] and not processed) then -- Test
                            local Held = true
                            local Connection
                            Connection = input.Changed:Connect(function(prop)
                                if prop == "UserInputState" then
                                    Connection:Disconnect()
                                    Held = false
                                end
                            end)
        
                            if not KeybindSettings.HoldToInteract then
                                local Success, Response = pcall(KeybindSettings.callback)
                                if not Success then
                                    CreateKeybinds["22"].Text = "Callback Error"
                                    print("Zephy | "..KeybindSettings.Name.." Callback Error " ..tostring(Response))
                                    wait(0.5)
                                    CreateKeybinds["22"].Text = KeybindSettings.Name
                                end
                            else
                                wait(0.25)
                                if Held then
                                    local Loop; Loop = runservice.Stepped:Connect(function()
                                        if not Held then
                                            KeybindSettings.callback(false) -- maybe pcall this
                                            Loop:Disconnect()
                                        else
                                            KeybindSettings.callback(true) -- maybe pcall this
                                        end
                                    end)	
                                end
                            
                        end
                            elseif input.UserInputType == Enum.UserInputType.MouseButton1 and Gui["1"].Enabled and CreateKeybinds.hover then						
                                CreateKeybinds.MouseDown = true
                                Library:tween(CreateKeybinds["1d"], {Color = Color3.fromRGB(200, 200, 200)})
                                Library:tween(CreateKeybinds["1c"], {BackgroundColor3 = Color3.fromRGB(95,95,95)})
                        end
                    end)
        
                    CreateKeybinds["20"]:GetPropertyChangedSignal("Text"):Connect(function()
                        tweenservice:Create(CreateKeybinds["20"], TweenInfo.new(0.55, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0,CreateKeybinds["20"].TextBounds.X + 24, 0, 25)}):Play()
                    end)
        
                    uis.InputEnded:Connect(function(input,gpe)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            CreateKeybinds.MouseDown = false
                            if CreateKeybinds.hover then
                                Library:tween(CreateKeybinds["1d"], {Color = Color3.fromRGB(56, 56, 56)})
                                Library:tween(CreateKeybinds["1c"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
        
                            else
                                Library:tween(CreateKeybinds["1d"], {Color = Color3.fromRGB(118, 117, 117)})
                                Library:tween(CreateKeybinds["1c"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                            end
                        end
        
                    end)		
        
                    function KeybindSettings:Set(NewKeybind)
        
                        CreateKeybinds["20"].Text = tostring(NewKeybind)
                        KeybindSettings.CurrentKeybind = tostring(NewKeybind)
                        CreateKeybinds["20"]:ReleaseFocus()
                        SaveConfiguration()
                    end
                    if Settings.ConfigurationSaving then
                        if Settings.ConfigurationSaving.Enabled and KeybindSettings.Flag then
                            Library.Flags[KeybindSettings.Flag] = KeybindSettings
                        end
                    end
                    return KeybindSettings
                end
        
                ---slider
                function SectionHolder:CreateSlider(SliderSettings)
                    local Dragging = false
                    local Slider = {
                        hover = false,
                        MouseDown = false,
                        connection = false
        
                    }
        
        --render
                    do
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider
                    Slider["23"] = Instance.new("TextButton",    SectionHolder["1a"] );
                    Slider["23"]["BorderSizePixel"] = 0;
                    Slider["23"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                    Slider["23"]["Size"] = UDim2.new(0.9, 0, 0, 30);
                    Slider["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Slider["23"]["Text"] = ""
                    Slider["23"]["Name"] = [[Slider]];
                    Slider["23"]["Visible"] = true;
        
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.UIStroke
                    Slider["24"] = Instance.new("UIStroke", Slider["23"]);
                    Slider["24"]["Color"] = Color3.fromRGB(118, 117, 117);
                    Slider["24"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.UIPadding
                    Slider["25"] = Instance.new("UIPadding", Slider["23"]);
                    Slider["25"]["PaddingLeft"] = UDim.new(0, 1);
        
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.UICorner
                    Slider["26"] = Instance.new("UICorner", Slider["23"]);
        
        
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.Value
                    Slider["27"] = Instance.new("TextLabel", Slider["23"]);
                    Slider["27"]["TextWrapped"] = true;
                    Slider["27"]["BorderSizePixel"] = 0;
                    Slider["27"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    Slider["27"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    Slider["27"]["TextSize"] = 14;
                    Slider["27"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                    Slider["27"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    Slider["27"]["Size"] = UDim2.new(0, 70, 0, 20);
                    Slider["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Slider["27"]["Text"] = [[0]];
                    Slider["27"]["Name"] = [[Value]];
                    Slider["27"]["BackgroundTransparency"] = 2;
                    Slider["27"]["Position"] = UDim2.new(0.8, 0, 0.35, 0);
        
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack
                    Slider["28"] = Instance.new("Frame", Slider["23"]);
                    Slider["28"]["BorderSizePixel"] = 0;
                    Slider["28"]["BackgroundColor3"] = Color3.fromRGB(66, 66, 66);
                    Slider["28"]["AnchorPoint"] = Vector2.new(0, 1);
                    Slider["28"]["Size"] = UDim2.new(0.949999988079071, 0, 0, 5);
                    Slider["28"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Slider["28"]["Position"] = UDim2.new(0, 8, 0.800000011920929, 0);
                    Slider["28"]["Name"] = [[SlideBack]];
                    Slider["28"]["ClipsDescendants"] = true
        
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack.UICorner
                    Slider["29"] = Instance.new("UICorner", Slider["28"]);
        
        
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack.UIStroke
                    Slider["2a"] = Instance.new("UIStroke", Slider["28"]);
                    Slider["2a"]["Color"] = Color3.fromRGB(91, 91, 91);
                    Slider["2a"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
        
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack.Dragger
                    Slider["2b"] = Instance.new("Frame", Slider["28"]);
                    Slider["2b"]["BorderSizePixel"] = 0;
                    Slider["2b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    Slider["2b"]["Size"] = UDim2.new(0, 0, 1, 0);
                    Slider["2b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Slider["2b"]["Name"] = [[Dragger]];
        
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack.Dragger.UIStroke
                    Slider["2c"] = Instance.new("UIStroke", Slider["2b"]);
                    Slider["2c"]["Color"] = Color3.fromRGB(103, 102, 102);
        
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack.Dragger.UICorner
                    Slider["2d"] = Instance.new("UICorner", Slider["2b"]);
        
        
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.title
                    Slider["2e"] = Instance.new("TextLabel", Slider["23"]);
                    Slider["2e"]["TextWrapped"] = true;
                    Slider["2e"]["BorderSizePixel"] = 0;
                    Slider["2e"]["TextScaled"] = true;
                    Slider["2e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    Slider["2e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                    Slider["2e"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    Slider["2e"]["TextSize"] = 14;
                    Slider["2e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                    Slider["2e"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    Slider["2e"]["Size"] = UDim2.new(0, 100, 0, 20);
                    Slider["2e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Slider["2e"]["Text"] = SliderSettings.Name;
                    Slider["2e"]["Name"] = [[title]];
                    Slider["2e"]["BackgroundTransparency"] = 2;
                    Slider["2e"]["Position"] = UDim2.new(0.29, 0, 0.35, 0);

                    end
        
        
                  
        
                   
                    Slider["2b"].Size =	UDim2.new(0, Slider["23"].AbsoluteSize.X * ((SliderSettings.CurrentValue + SliderSettings.Range[1]) / (SliderSettings.Range[2] - SliderSettings.Range[1])) > 5 and Slider["23"].AbsoluteSize.X * (SliderSettings.CurrentValue / (SliderSettings.Range[2] - SliderSettings.Range[1])) or 5, 1, 0)
                    
                    if not SliderSettings.Suffix then
                        Slider["27"].Text = tostring(SliderSettings.CurrentValue)
                    else
                        Slider["27"].Text = tostring(SliderSettings.CurrentValue) .. " " .. SliderSettings.Suffix
                    end
        
        
                    Slider["23"].MouseEnter:Connect(function()
                        Slider.hover = true
                        Library:tween(Slider["24"], {Color = Color3.fromRGB(56, 56, 56)})
                        Library:tween(Slider["2a"], {Color = Color3.fromRGB(56, 56, 56)})
                        Library:tween(Slider["2b"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)}) 
                    end) 
        
                    Slider["23"].MouseLeave:Connect(function()
                        Slider.hover = false
                        if not Slider.MouseDown  then
                            Library:tween(Slider["24"], {Color = Color3.fromRGB(95,95,95)})
                            Library:tween(Slider["2b"], {BackgroundColor3 = Color3.fromRGB(255, 255, 255)})
        
                        end 
                    end)
        
                    uis.InputBegan:Connect(function(input,gpe)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 and Gui["1"].Enabled and Slider.hover then						
                            Slider.MouseDown = true
                            Dragging = true 
                            Library:tween(Slider["23"], {BackgroundColor3 = Color3.fromRGB(110,110,110)})
                            Library:tween(Slider["24"], {Color = Color3.fromRGB(200, 200, 200)})
                            Library:tween(Slider["2a"], {Color = Color3.fromRGB(200, 200, 200)})
                            Library:tween(Slider["2b"], {BackgroundColor3 = Color3.fromRGB(56,56,56)})
                        end
                    end)
        
                    uis.InputEnded:Connect(function(input,gpe)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Slider.MouseDown = false
                            Dragging = false 
        
                            if Slider.hover then
                                Library:tween(Slider["23"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                                Library:tween(Slider["24"], {Color = Color3.fromRGB(95,95,95)})
                                Library:tween(Slider["2a"], {Color = Color3.fromRGB(95,95,95)})
                                Library:tween(Slider["2b"], {BackgroundColor3 = Color3.fromRGB(95,95,95)})
        
                            else
                                Library:tween(Slider["23"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                                Library:tween(Slider["24"], {Color = Color3.fromRGB(95,95,95)})
                                Library:tween(Slider["2a"], {Color = Color3.fromRGB(95,95,95)})
                                Library:tween(Slider["2b"], {BackgroundColor3 = Color3.fromRGB(255,255,255)})
        
                            end
                            if Slider.connection then Slider.connection:Disconnect() end
                            Slider.connection = nil
                        end
        
                    end)
                   
        
                    Slider["23"].MouseButton1Down:Connect(function(X)
                        if Gui["1"].Enabled and Slider.hover then
        
                            local Current = Slider["2b"].AbsolutePosition.X + Slider["2b"].AbsoluteSize.X
                            local Start = Current
                            local Location = X
                            local Loop; Loop = runservice.Stepped:Connect(function()
                                if Dragging then
                                    Location = uis:GetMouseLocation().X
                                    Current = Current + 0.025 * (Location - Start)
            
                                    if Location < Slider["23"].AbsolutePosition.X then
                                        Location =  Slider["23"].AbsolutePosition.X
                                    elseif Location >  Slider["23"].AbsolutePosition.X + Slider["23"].AbsoluteSize.X then
                                        Location =  Slider["23"].AbsolutePosition.X +Slider["23"].AbsoluteSize.X
                                    end
            
                                    if Current < Slider["23"].AbsolutePosition.X + 5 then
                                        Current = Slider["23"].AbsolutePosition.X + 5
                                    elseif Current > Slider["23"].AbsolutePosition.X + Slider["23"].AbsoluteSize.X then
                                        Current = Slider["23"].AbsolutePosition.X + Slider["23"].AbsoluteSize.X
                                    end
            
                                    if Current <= Location and (Location - Start) < 0 then
                                        Start = Location
                                    elseif Current >= Location and (Location - Start) > 0 then
                                        Start = Location
                                    end
                                    Slider["2b"].Size = UDim2.new(0, Current -Slider["23"].AbsolutePosition.X, 1, 0)
                                    local NewValue = SliderSettings.Range[1] + (Location - Slider["23"].AbsolutePosition.X) / Slider["23"].AbsoluteSize.X * (SliderSettings.Range[2] - SliderSettings.Range[1])
            
                                    NewValue = math.floor(NewValue / SliderSettings.Increment + 0.5) * (SliderSettings.Increment * 10000000) / 10000000
                                    if not SliderSettings.Suffix then
                                        Slider["27"].Text = tostring(NewValue)
                                    else
                                        Slider["27"].Text = tostring(NewValue) .. " " .. SliderSettings.Suffix
                                    end
            
                                    if SliderSettings.CurrentValue ~= NewValue then
                                        local Success, Response = pcall(function()
                                            SliderSettings.callback(NewValue)
                                        end)
                                        if not Success then
                                            Slider["2e"].Text = "Callback Error"
                                            print("zephy | "..SliderSettings.Name.." Callback Error " ..tostring(Response))
                                            wait(0.5)
                                            Slider["2e"].Text = SliderSettings.Name
                                        end
            
                                        SliderSettings.CurrentValue = NewValue
                                        SaveConfiguration()
                                    end
                                else
                                    Slider["2b"].Size = UDim2.new(0, Location - Slider["23"].AbsolutePosition.X > 5 and Location - Slider["23"].AbsolutePosition.X or 5, 1, 0)
                                    Loop:Disconnect()
                                end
                            end)
                        end
                    end)
        
                    function SliderSettings:Set(NewVal)
        
                        Slider["2b"].Size = UDim2.new(0, Slider["23"].AbsoluteSize.X * ((NewVal + SliderSettings.Range[1]) / (SliderSettings.Range[2] - SliderSettings.Range[1])) > 5 and Slider["23"].AbsoluteSize.X * (NewVal / (SliderSettings.Range[2] - SliderSettings.Range[1])) or 5, 1, 0)
                        Slider["27"].Text= tostring(NewVal) .. " " .. SliderSettings.Suffix
                        local Success, Response = pcall(function()
                            SliderSettings.callback(NewVal)
                        end)
                        if not Success then
                            Slider["2e"].Text = "Callback Error"
                            print("zephy | "..SliderSettings.Name.." Callback Error " ..tostring(Response))
                            wait(0.5)
                            Slider["2e"].Text = SliderSettings.Name
                         end
                        SliderSettings.CurrentValue = NewVal
                        SaveConfiguration()
                    end
                    if Settings.ConfigurationSaving then
                        if Settings.ConfigurationSaving.Enabled and SliderSettings.Flag then
                            Library.Flags[SliderSettings.Flag] = SliderSettings
                        end
                    end
                    return SliderSettings
                end
                -- Input
                function SectionHolder:CreateInput(InputSettings)
                    local TextBox = {
                        hover = false,
                        MouseDown = false,
                    }	
                    --render 
                    do
                        -- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.textbutton
                        TextBox["96"] = Instance.new("Frame",    SectionHolder["1a"] );
                        TextBox["96"]["BorderSizePixel"] = 0;
                        TextBox["96"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                        TextBox["96"]["Size"] = UDim2.new(0.9, 0, 0, 30);
                        TextBox["96"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        TextBox["96"]["Name"] = [[textbox]];
                        -- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.textbox.UICorner
                        TextBox["97"] = Instance.new("UICorner", TextBox["96"]);
        
        
                        -- StarterGui.qwtq.Main.ContentContainer.HomeTab.KeyBind.Title
                        TextBox["105"] = Instance.new("TextLabel", TextBox["96"]);
                        TextBox["105"]["TextWrapped"] = true;
                        TextBox["105"]["BorderSizePixel"] = 0;
                        TextBox["105"]["TextScaled"] = true;
                        TextBox["105"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                        TextBox["105"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                        TextBox["105"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                        TextBox["105"]["TextSize"] = 14;
                        TextBox["105"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                        TextBox["105"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        TextBox["105"]["Size"] = UDim2.new(0, 100, 0, 20);
                        TextBox["105"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        TextBox["105"]["Text"] = InputSettings.Name;
                        TextBox["105"]["Name"] = [[Title]];
                        TextBox["105"]["BackgroundTransparency"] = 2;
                        TextBox["105"]["Position"] = UDim2.new(0.29, 0, 0.5, 0);
        
                        -- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.textbox.Title
                        TextBox["98"] = Instance.new("TextBox", TextBox["96"]);
                        TextBox["98"]["TextWrapped"] = true;
                        TextBox["98"]["BorderSizePixel"] = 0;
                        TextBox["98"]["TextScaled"] = true;
                        TextBox["98"]["BackgroundColor3"] = Color3.fromRGB(126, 126, 126);
                        TextBox["98"]["TextXAlignment"] = Enum.TextXAlignment.Center;
                        TextBox["98"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                        TextBox["98"]["TextSize"] = 14;
                        TextBox["98"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                        TextBox["98"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                        TextBox["98"]["Size"] = UDim2.new(0, 70, 0, 25);
                        TextBox["98"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179)
                        TextBox["98"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                        TextBox["98"]["Text"] = "";
                        TextBox["98"]["Name"] = [[Title]];
                        TextBox["98"]["BackgroundTransparency"] = 0.9;
                        TextBox["98"]["Position"] = UDim2.new(0.8, 0,0.5, 0);
                        TextBox["98"]["PlaceholderText"] = InputSettings.PlaceholderText
        
        
                        TextBox["101"] = Instance.new("UICorner", TextBox["98"]);
        
                        -- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.textbox.UIPadding
                        TextBox["99"] = Instance.new("UIPadding", TextBox["96"]);
                        TextBox["99"]["PaddingLeft"] = UDim.new(0, 1);
        
                        -- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.textbox.UIStroke
                        TextBox["100"] = Instance.new("UIStroke", TextBox["96"]);
                        TextBox["100"]["Color"] = Color3.fromRGB(118, 117, 117);
                        TextBox["100"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

                    end
        
                    TextBox["98"].PlaceholderText = InputSettings.PlaceholderText
        
                    TextBox["98"].FocusLost:Connect(function()
                        local Success, Response = pcall(function()
                            InputSettings.callback(TextBox["98"].Text)
                            InputSettings.CurrentValue = TextBox["98"].Text
                            
                            SaveConfiguration()
                        end)
                        
                        
                        if not Success then
                            TextBox["105"].Text = "Callback Error"
                            print("Zephy | "..InputSettings.Name.." Callback Error " ..tostring(Response))
                            wait(0.5)
                            TextBox["105"].Text = InputSettings.Name
                        end
        
        
                        if InputSettings.RemoveTextAfterFocusLost then
                            TextBox["98"].Text = ""
                        end
                        SaveConfiguration()
        
                    end)
        
             TextBox["96"].MouseEnter:Connect(function()
                        TextBox.hover = true
                        Library:tween(TextBox["100"], {Color = Color3.fromRGB(56, 56, 56)})
                    end)
        
                    TextBox["96"].MouseLeave:Connect(function()
                        TextBox.hover = false
                        if not TextBox.MouseDown  then
                            Library:tween(TextBox["100"], {Color = Color3.fromRGB(118, 117, 117)})
                        end 
                    end)
        
                    uis.InputBegan:Connect(function(input,gpe)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 and Gui["1"].Enabled and TextBox.hover then						
                            TextBox.MouseDown = true
                            Library:tween(TextBox["100"], {Color = Color3.fromRGB(200, 200, 200)})
                            Library:tween(TextBox["96"], {BackgroundColor3 = Color3.fromRGB(95,95,95)})
                        end
        
                    end)
        
                    uis.InputEnded:Connect(function(input,gpe)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            TextBox.MouseDown = false
                            if TextBox.hover then
                                Library:tween(TextBox["100"], {Color = Color3.fromRGB(56, 56, 56)})
                                Library:tween(TextBox["96"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
        
                            else
                                Library:tween(TextBox["100"], {Color = Color3.fromRGB(118, 117, 117)})
                                Library:tween(TextBox["96"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                            end
                        end
        
                    end)
                    function InputSettings:Set(NewVal)
        
                        TextBox["98"].Text = tostring(NewVal)
                        InputSettings.CurrentValue = tostring(NewVal)
                        TextBox["98"]:ReleaseFocus()
                        SaveConfiguration()
                    end
                    if Settings.ConfigurationSaving then
                        if Settings.ConfigurationSaving.Enabled and InputSettings.Flag then
                            Library.Flags[InputSettings.Flag] = InputSettings
                        end
                    end
                return InputSettings
                end
        
        
            return SectionHolder
        end


        function Tab:SectionHolder2(SettingsSection)
            local SectionHolder = {}
                do 
            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section
            SectionHolder["1a"] = Instance.new("Frame", Tab["25"]);
            SectionHolder["1a"]["BorderSizePixel"] = 0;
            SectionHolder["1a"]["BackgroundColor3"] = Color3.fromRGB(36, 36, 36);
            SectionHolder["1a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
            SectionHolder["1a"]["Size"] = UDim2.new(1, 0, 0, 30);
            SectionHolder["1a"]["ClipsDescendants"] = true;
            SectionHolder["1a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            SectionHolder["1a"]["Position"] = UDim2.new(0.5468594431877136, 0, 0.23470667004585266, 0);
            SectionHolder["1a"]["Name"] = [[Section]];

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.UIStroke
            SectionHolder["1b"] = Instance.new("UIStroke", SectionHolder["1a"]);
            SectionHolder["1b"]["Color"] = Color3.fromRGB(96, 96, 96);
            SectionHolder["1b"]["Thickness"] = 2;
            SectionHolder["1b"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.UICorner
            SectionHolder["1c"] = Instance.new("UICorner", SectionHolder["1a"]);
            SectionHolder["1c"]["CornerRadius"] = UDim.new(0, 4);

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.Name
            SectionHolder["1d"] = Instance.new("Frame", SectionHolder["1a"]);
            SectionHolder["1d"]["BorderSizePixel"] = 0;
            SectionHolder["1d"]["BackgroundColor3"] = Color3.fromRGB(51, 51, 51);
            SectionHolder["1d"]["Size"] = UDim2.new(1, 0, 0, 30);
            SectionHolder["1d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            SectionHolder["1d"]["Name"] = [[Name]];



            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.Name.UIPadding
            SectionHolder["1e"] = Instance.new("UIPadding", SectionHolder["1d"]);
            SectionHolder["1e"]["PaddingLeft"] = UDim.new(0, -5);

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.Name.LabelName
            SectionHolder["1f"] = Instance.new("TextLabel", SectionHolder["1d"]);
            SectionHolder["1f"]["TextWrapped"] = true;
            SectionHolder["1f"]["BorderSizePixel"] = 0;
            SectionHolder["1f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
            SectionHolder["1f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
            SectionHolder["1f"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
            SectionHolder["1f"]["TextSize"] = 18;
            SectionHolder["1f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
            SectionHolder["1f"]["AnchorPoint"] = Vector2.new(0.5, 0);
            SectionHolder["1f"]["Size"] = UDim2.new(0, 190, 0, 20);
            SectionHolder["1f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            SectionHolder["1f"]["Text"] = SettingsSection.name;
            SectionHolder["1f"]["Name"] = [[LabelName]];
            SectionHolder["1f"]["BackgroundTransparency"] = 2;
            SectionHolder["1f"]["Position"] = UDim2.new(0, 115, 0, 5);

           -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["46"]
           SectionHolder["5h"] = Instance.new("ImageButton",  SectionHolder["1d"]);
           SectionHolder["5h"]["BorderSizePixel"] = 0;
           SectionHolder["5h"]["ImageColor3"] = Color3.fromRGB(151, 151, 151);
           SectionHolder["5h"]["LayoutOrder"] = 9;
           SectionHolder["5h"]["AnchorPoint"] = Vector2.new(0, 0);
           SectionHolder["5h"]["Image"] = [[rbxassetid://3926305904]];
           SectionHolder["5h"]["ImageRectSize"] = Vector2.new(36, 36);
           SectionHolder["5h"]["Size"] = UDim2.new(0, 32, 0, 28);
           SectionHolder["5h"]["Name"] = [[Toggle]];
           SectionHolder["5h"]["ImageRectOffset"] = Vector2.new(564, 284);
           SectionHolder["5h"]["Position"] = UDim2.new(0.8199999928474426, 0, 0, 0);
           SectionHolder["5h"]["BackgroundTransparency"] = 1;
            
            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.Name.UICorner
            SectionHolder["20"] = Instance.new("UICorner", SectionHolder["1d"]);
            SectionHolder["20"]["CornerRadius"] = UDim.new(0, 4);

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.Name.Line
            SectionHolder["21"] = Instance.new("Frame", SectionHolder["1d"]);
            SectionHolder["21"]["BorderSizePixel"] = 0;
            SectionHolder["21"]["BackgroundColor3"] = Color3.fromRGB(51, 51, 51);
            SectionHolder["21"]["Size"] = UDim2.new(0.9750587940216064, 0, -0.800000011920929, 30);
            SectionHolder["21"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
            SectionHolder["21"]["Position"] = UDim2.new(0.0249412190169096, 0, 0.8333333134651184, 0);
            SectionHolder["21"]["Name"] = [[Line]];

            -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Section.UIListLayout
            SectionHolder["22"] = Instance.new("UIListLayout", SectionHolder["1a"]);
            SectionHolder["22"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;
            SectionHolder["22"]["Padding"] = UDim.new(0, 6);
            SectionHolder["22"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


            SectionHolder["22"] :GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                SectionHolder["1a"].Size = UDim2.new(1, 0, 0,  SectionHolder["22"].AbsoluteContentSize.Y + 38)
            end)
                end

  

                if SettingsSection.OpenSection then
                    SectionHolder["5h"].Visible = true
                else
                    SectionHolder["5h"].Visible = false
                end   
                SectionHolder["5h"].MouseButton1Click:Connect(function()
                    if SectionHolder["1a"].Size ~= UDim2.new(1, 0, 0, 30) then
                tweenservice:Create(SectionHolder["1a"], TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size = UDim2.new(1, 0, 0, 30)}):Play()
                tweenservice:Create( SectionHolder["5h"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Rotation = 180}):Play()	

            else
                        tweenservice:Create(SectionHolder["1a"], TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size =UDim2.new(1, 0, 0,  SectionHolder["22"].AbsoluteContentSize.Y + 38)}):Play()

                        tweenservice:Create( SectionHolder["5h"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Rotation = 0}):Play()	


                    end
            end)



            function SectionHolder:AddToggle(ToggleSettings)
                local Toggle = {
                    hover = false,
                    MouseDown = false,
                }
    
                --render 
                do
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive
                    Toggle["2f"] = Instance.new("TextButton",    SectionHolder["1a"] );
                    Toggle["2f"]["BorderSizePixel"] = 0;
                    Toggle["2f"].Text = ""
                    Toggle["2f"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                    Toggle["2f"]["Size"] = UDim2.new(0.9, 0, 0, 30);
                    Toggle["2f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Toggle["2f"]["Name"] = [[ToggleInactive]];
                    Toggle["2f"]["Visible"] = true;
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.UIStroke
                    Toggle["30"] = Instance.new("UIStroke", Toggle["2f"]);
                    Toggle["30"]["Color"] = Color3.fromRGB(118, 117, 117);
                    Toggle["30"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.UIPadding
                    Toggle["31"] = Instance.new("UIPadding", Toggle["2f"]);
                    Toggle["31"]["PaddingLeft"] = UDim.new(0, 1);
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.UICorner
                    Toggle["32"] = Instance.new("UICorner", Toggle["2f"]);
    
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.CheckmarkHolder
                    Toggle["33"] = Instance.new("Frame", Toggle["2f"]);
                    Toggle["33"]["BorderSizePixel"] = 0;
                    Toggle["33"]["BackgroundColor3"] = Color3.fromRGB(66, 66, 66);
                    Toggle["33"]["AnchorPoint"] = Vector2.new(1, 0.5);
                    Toggle["33"]["Size"] = UDim2.new(0, 17, 0, 17);
                    Toggle["33"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Toggle["33"]["Position"] = UDim2.new(1, -10, 0.5, 0);
                    Toggle["33"]["Name"] = [[CheckmarkHolder]];
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.CheckmarkHolder.UIStroke
                    Toggle["34"] = Instance.new("UIStroke", Toggle["33"]);
                    Toggle["34"]["Color"] = Color3.fromRGB(118, 117, 117);
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.CheckmarkHolder.UICorner
                    Toggle["35"] = Instance.new("UICorner", Toggle["33"]);
                    Toggle["35"]["CornerRadius"] = UDim.new(0, 2);
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.CheckmarkHolder.Checkmark
                    Toggle["36"] = Instance.new("ImageLabel", Toggle["33"]);
                    Toggle["36"]["BorderSizePixel"] = 0;
                    Toggle["36"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    Toggle["36"]["Visible"] = true;
                    Toggle["36"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    Toggle["36"]["Image"] = [[rbxassetid://14044220049]];
                    Toggle["36"]["Size"] = UDim2.new(1, 0, 1, 0);
                    Toggle["36"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Toggle["36"]["Name"] = [[Checkmark]];
                    Toggle["36"]["BackgroundTransparency"] = 1;
                    Toggle["36"]["ImageTransparency"] = 1;
                    Toggle["36"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ToggleInactive.Title
                    Toggle["37"] = Instance.new("TextLabel", Toggle["2f"]);
                    Toggle["37"]["TextWrapped"] = true;
                    Toggle["37"]["BorderSizePixel"] = 0;
                    Toggle["37"]["RichText"] = true;
                    Toggle["37"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    Toggle["37"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                    Toggle["37"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    Toggle["37"]["TextSize"] = 20;
                    Toggle["37"]["TextScaled"] = true;
    
                    Toggle["37"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                    Toggle["37"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    Toggle["37"]["Size"] = UDim2.new(0, 100, 0, 20);
                    
                    Toggle["37"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Toggle["37"]["Text"] = ToggleSettings.Name;
                    Toggle["37"]["Name"] = [[Title]];
                    Toggle["37"]["BackgroundTransparency"] = 2;
                    Toggle["37"]["Position"] = UDim2.new(0.29, 0, 0.5, 0);
                    

    
                end
    
                if not ToggleSettings.CurrentValue then
                    Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(66, 66, 66)})
                    Library:tween(Toggle["36"],{ImageTransparency = 1})
            else
                Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(36, 135, 0)})
                Library:tween(Toggle["36"],{ImageTransparency = 0})
    
                end
    
                Toggle["2f"].MouseEnter:Connect(function()
                    Toggle.hover = true
                    Library:tween(Toggle["30"], {Color = Color3.fromRGB(56, 56, 56)})
                end) 
    
                Toggle["2f"].MouseLeave:Connect(function()
                    Toggle.hover = false
                    if not Toggle.MouseDown  then
                        Library:tween(Toggle["30"], {Color = Color3.fromRGB(118, 117, 117)})
    
                    end 
                end)
    
                uis.InputBegan:Connect(function(input,gpe)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 and Gui["1"].Enabled and Toggle.hover then						
                        Toggle.MouseDown = true
                        Library:tween(Toggle["30"], {Color = Color3.fromRGB(200, 200, 200)})
                        Library:tween(Toggle["2f"], {BackgroundColor3 = Color3.fromRGB(95,95,95)})
                    end
    
                end)
    
                uis.InputEnded:Connect(function(input,gpe)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Toggle.MouseDown = false
                        if Toggle.hover then
                            Library:tween(Toggle["30"], {Color = Color3.fromRGB(56, 56, 56)})
                            Library:tween(Toggle["2f"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
    
                        else
                            Library:tween(Toggle["30"], {Color = Color3.fromRGB(118, 117, 117)})
                            Library:tween(Toggle["2f"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                        end
                    end
    
                end)
    
                Toggle["2f"].MouseButton1Click:Connect(function()
                    if ToggleSettings.CurrentValue then
                        ToggleSettings.CurrentValue = false
                        Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(66, 66, 66)})
                        Library:tween(Toggle["36"],{ImageTransparency = 1})
                else
                        ToggleSettings.CurrentValue = true
                        Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(36, 135, 0)})
                        Library:tween(Toggle["36"],{ImageTransparency = 0})
                        end
    
                    local Success, Response = pcall(function()
                        ToggleSettings.callback(ToggleSettings.CurrentValue)
                    end)
                    if not Success then
                        Toggle["37"].Text = "Callback Error"
                        print("Zepohy | "..ToggleSettings.Name.." Callback Error " ..tostring(Response))
                        wait(0.5)
                        Toggle["37"].Text = ToggleSettings.Name
                        end
    
    
                    SaveConfiguration()
                end)
    
                function ToggleSettings:Set(NewValue)
    
                    if NewValue then
                        ToggleSettings.CurrentValue = true
                        Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(36, 135, 0)})
                        Library:tween(Toggle["36"],{ImageTransparency = 0})
                  else
                        ToggleSettings.CurrentValue = false
                        Library:tween(Toggle["33"],{BackgroundColor3 = Color3.fromRGB(66, 66, 66)})
                        Library:tween(Toggle["36"],{ImageTransparency = 1})
                            end
                    local Success, Response = pcall(function()
                        ToggleSettings.callback(ToggleSettings.CurrentValue)
                    end)
                    if not Success then
                        Toggle["37"].Text = "Callback Error"
                        print("Zephy | "..ToggleSettings.Name.." Callback Error " ..tostring(Response))
                        wait(0.5)
                        Toggle["37"].Text = ToggleSettings.Name
                        end
                    SaveConfiguration()
                end
    
                if Settings.ConfigurationSaving then
                    if Settings.ConfigurationSaving.Enabled and ToggleSettings.Flag then
                        Library.Flags[ToggleSettings.Flag] = ToggleSettings
                    end
                end
    
                return ToggleSettings
            end
    
            -- Dropdown
            function SectionHolder:AddDropDown(DropdownSettings)
                local CreateDropDown = {
                    hover = false,
                    MouseDown = false,
                }
                do

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Dropdown
                    CreateDropDown["38"] = Instance.new("Frame", SectionHolder["1a"]);
                    CreateDropDown["38"]["BorderSizePixel"] = 0;
                    CreateDropDown["38"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                    CreateDropDown["38"]["Size"] = UDim2.new(0.9, 0, 0, 30);
                    CreateDropDown["38"]["ClipsDescendants"] = true;
                    CreateDropDown["38"]["Position"] = UDim2.new(-0.11669977754354477, 0, 0.39556998014450073, 0);
                    CreateDropDown["38"]["Name"] = [[Dropdown]];

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["39"]
                    CreateDropDown["39"] = Instance.new("TextLabel", CreateDropDown["38"]);
                    CreateDropDown["39"]["TextWrapped"] = true;
                    CreateDropDown["39"]["ZIndex"] = 3;
                    CreateDropDown["39"]["BorderSizePixel"] = 0;
                    CreateDropDown["39"]["TextScaled"] = true;
                    CreateDropDown["39"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    CreateDropDown["39"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                    CreateDropDown["39"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
                    CreateDropDown["39"]["TextSize"] = 14;
                    CreateDropDown["39"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
                    CreateDropDown["39"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    CreateDropDown["39"]["Size"] = UDim2.new(0, 100, 0, 20);
                    CreateDropDown["39"]["Text"] = DropdownSettings.Name;
                    CreateDropDown["39"]["Name"] = [[Title]];
                    CreateDropDown["39"]["BackgroundTransparency"] = 1;
                    CreateDropDown["39"]["Position"] = UDim2.new(0, 56, 0, 15);

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"]
                    CreateDropDown["3a"] = Instance.new("ScrollingFrame", CreateDropDown["38"]);
                    CreateDropDown["3a"]["Active"] = true;
                    CreateDropDown["3a"]["BorderSizePixel"] = 0;
                    CreateDropDown["3a"]["ScrollBarImageTransparency"] = 0.699999988079071;
                    CreateDropDown["3a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    CreateDropDown["3a"]["AutomaticCanvasSize"] = Enum.AutomaticSize.Y;
                    CreateDropDown["3a"]["BackgroundTransparency"] = 1;
                    CreateDropDown["3a"]["Size"] = UDim2.new(1, 0, 1, 0);
                    CreateDropDown["3a"]["ScrollBarImageColor3"] = Color3.fromRGB(241, 241, 241);
                    CreateDropDown["3a"]["ScrollBarThickness"] = 3;
                    CreateDropDown["3a"]["Position"] = UDim2.new(0, 0, 0, 38);
                    CreateDropDown["3a"]["Name"] = [[List]];




                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].UIListLayout
                    CreateDropDown["3b"] = Instance.new("UIListLayout", CreateDropDown["3a"]);
                    CreateDropDown["3b"]["Padding"] = UDim.new(0, 5);
                    CreateDropDown["3b"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
                    CreateDropDown["3b"]["HorizontalAlignment"] = Enum.HorizontalAlignment.Center;

                    CreateDropDown["3b"]:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                        CreateDropDown["3a"].CanvasSize = UDim2.new(1, 0, 0,  CreateDropDown["3b"].AbsoluteContentSize.Y + 35)
                    end)
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Placeholder
                    CreateDropDown["3c"] = Instance.new("Frame", CreateDropDown["3a"]);
                    CreateDropDown["3c"]["BorderSizePixel"] = 0;
                    CreateDropDown["3c"]["BackgroundColor3"] = Color3.fromRGB(31, 31, 31);
                    CreateDropDown["3c"]["LayoutOrder"] = -100;
                    CreateDropDown["3c"]["Position"] = UDim2.new(0.39247313141822815, 0, 0, 0);
                    CreateDropDown["3c"]["Name"] = [[Placeholder]];

                    

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].UIPadding
                    CreateDropDown["43"] = Instance.new("UIPadding", CreateDropDown["3a"]);
                    CreateDropDown["43"]["PaddingRight"] = UDim.new(0, 5);
                    CreateDropDown["43"]["PaddingLeft"] = UDim.new(0, 5);

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["44"]
                    CreateDropDown["44"] = Instance.new("TextLabel", CreateDropDown["38"]);
                    CreateDropDown["44"]["TextWrapped"] = true;
                    CreateDropDown["44"]["BorderSizePixel"] = 0;
                    CreateDropDown["44"]["TextScaled"] = true;
                    CreateDropDown["44"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    CreateDropDown["44"]["TextXAlignment"] = Enum.TextXAlignment.Right;
                    CreateDropDown["44"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
                    CreateDropDown["44"]["TextSize"] = 14;
                    CreateDropDown["44"]["TextColor3"] = Color3.fromRGB(151, 151, 151);
                    CreateDropDown["44"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    CreateDropDown["44"]["Size"] = UDim2.new(0, 55, 0, 25);
                    CreateDropDown["44"]["Text"] = [[Option #1]];
                    CreateDropDown["44"]["Name"] = [[Selected]];
                    CreateDropDown["44"]["BackgroundTransparency"] = 1;
                    CreateDropDown["44"]["Position"] = UDim2.new(0, 135, 0, 15);

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["44"].UITextSizeConstraint
                    CreateDropDown["45"] = Instance.new("UITextSizeConstraint", CreateDropDown["44"]);
                    CreateDropDown["45"]["MaxTextSize"] = 14;

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["46"]
                    CreateDropDown["46"] = Instance.new("ImageButton", CreateDropDown["38"]);
                    CreateDropDown["46"]["BorderSizePixel"] = 0;
                    CreateDropDown["46"]["ImageColor3"] = Color3.fromRGB(151, 151, 151);
                    CreateDropDown["46"]["LayoutOrder"] = 9;
                    CreateDropDown["46"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    CreateDropDown["46"]["Image"] = [[rbxassetid://3926305904]];
                    CreateDropDown["46"]["ImageRectSize"] = Vector2.new(36, 36);
                    CreateDropDown["46"]["Size"] = UDim2.new(0, 32, 0, 28);
                    CreateDropDown["46"]["Name"] = [[Toggle]];
                    CreateDropDown["46"]["ImageRectOffset"] = Vector2.new(564, 284);
                    CreateDropDown["46"]["Position"] = UDim2.new(0, 185, 0, 15);
                    CreateDropDown["46"]["BackgroundTransparency"] = 1;

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["47"]
                    CreateDropDown["47"] = Instance.new("TextButton", CreateDropDown["38"]);
                    CreateDropDown["47"]["ZIndex"] = 5;
                    CreateDropDown["47"]["BorderSizePixel"] = 0;
                    CreateDropDown["47"]["TextTransparency"] = 1;
                    CreateDropDown["47"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    CreateDropDown["47"]["TextSize"] = 14;
                    CreateDropDown["47"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    CreateDropDown["47"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
                    CreateDropDown["47"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    CreateDropDown["47"]["Size"] = UDim2.new(1, 0, 1, 0);
                    CreateDropDown["47"]["Name"] = [[Interact]];
                    CreateDropDown["47"]["Text"] = [[]];
                    CreateDropDown["47"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
                    CreateDropDown["47"]["BackgroundTransparency"] = 1;

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Dropdown.UICorner
                    CreateDropDown["48"] = Instance.new("UICorner", CreateDropDown["38"]);


                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Dropdown.UIPadding
                    CreateDropDown["49"] = Instance.new("UIPadding", CreateDropDown["38"]);
                    CreateDropDown["49"]["PaddingLeft"] = UDim.new(0, 1);

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["4a"]
                    CreateDropDown["4a"] = Instance.new("UIStroke", CreateDropDown["38"]);
                    CreateDropDown["4a"]["Color"] = Color3.fromRGB(118, 117, 117);
                    CreateDropDown["4a"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;


                end

                CreateDropDown["3a"].Visible = false

                if typeof(DropdownSettings.CurrentOption) == "string" then
                    DropdownSettings.CurrentOption = {DropdownSettings.CurrentOption}
                end

                if not DropdownSettings.MultipleOptions then
                    DropdownSettings.CurrentOption = {DropdownSettings.CurrentOption[1]}
                end

                if DropdownSettings.MultipleOptions then
                    if #DropdownSettings.CurrentOption == 1 then
                        CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                    elseif #DropdownSettings.CurrentOption == 0 then
                        CreateDropDown["44"].Text = "None"
                    else
                        CreateDropDown["44"].Text = "Various"
                    end
                else
                    CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                end


                CreateDropDown["38"].BackgroundTransparency = 1
                CreateDropDown["4a"].Transparency = 1
                CreateDropDown["39"].TextTransparency = 1

                CreateDropDown["38"].Size = UDim2.new(0.9, 0, 0, 30)

                tweenservice:Create(CreateDropDown["38"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {BackgroundTransparency = 0}):Play()
                tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                tweenservice:Create(CreateDropDown["39"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {TextTransparency = 0}):Play()	

                for _, ununusedoption in ipairs(CreateDropDown["3a"]:GetChildren()) do
                    if ununusedoption.ClassName == "Frame" and ununusedoption.Name ~= "Placeholder" then
                        ununusedoption:Destroy()
                    end
                end

                CreateDropDown["46"].Rotation = 180

                CreateDropDown["47"].MouseButton1Click:Connect(function()
                    tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.4, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                    wait(0.1)
                    tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.4, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                    if Debounce then return end
                    if CreateDropDown["3a"].Visible then
                        Debounce = true
                        tweenservice:Create(CreateDropDown["38"], TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size = UDim2.new(0.9, 0, 0, 30)}):Play()
                        for _, DropdownOpt in ipairs(CreateDropDown["3a"]:GetChildren()) do
                            if DropdownOpt.ClassName == "Frame" and DropdownOpt.Name ~= "Placeholder" then
                                tweenservice:Create(DropdownOpt, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundTransparency = 1}):Play()
                                tweenservice:Create(DropdownOpt.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                                tweenservice:Create(DropdownOpt.Title, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()
                            end
                        end
                        tweenservice:Create(CreateDropDown["3a"], TweenInfo.new(0.3, Enum.EasingStyle.Quint), {ScrollBarImageTransparency = 1}):Play()
                        tweenservice:Create(CreateDropDown["46"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Rotation = 180}):Play()	
                        wait(0.35)
                        CreateDropDown["3a"].Visible = false
                        Debounce = false
                    else
                        tweenservice:Create(CreateDropDown["38"], TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size = UDim2.new(0.9, 0, 0, 180)}):Play()
                        CreateDropDown["3a"].Visible = true
                        tweenservice:Create(CreateDropDown["3a"], TweenInfo.new(0.3, Enum.EasingStyle.Quint), {ScrollBarImageTransparency = 0.7}):Play()
                        tweenservice:Create(CreateDropDown["46"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Rotation = 0}):Play()	
                        for _, DropdownOpt in ipairs(CreateDropDown["3a"]:GetChildren()) do
                            if DropdownOpt.ClassName == "Frame" and DropdownOpt.Name ~= "Placeholder" then
                                tweenservice:Create(DropdownOpt, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundTransparency = 0}):Play()
                                tweenservice:Create(DropdownOpt.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                                tweenservice:Create(DropdownOpt.Title, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {TextTransparency = 0}):Play()
                            end
                        end
                    end
                end)
                
                
                CreateDropDown["38"].MouseEnter:Connect(function()
                    if not CreateDropDown["3a"].Visible then
                        CreateDropDown.hover = true
                        Library:tween(CreateDropDown["4a"], {Color = Color3.fromRGB(56, 56, 56)})
                        Library:tween(CreateDropDown["38"], {BackgroundColor3 = Color3.fromRGB(49, 49, 49)})

                    end
                end)

                CreateDropDown["38"].MouseLeave:Connect(function()
                    CreateDropDown.hover = false
                    if not CreateDropDown.MouseDown  then
                        Library:tween(CreateDropDown["4a"], {Color = Color3.fromRGB(95,95,95)})
                        Library:tween(CreateDropDown["38"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})

                    end

                end)

                



                for _, Option in ipairs(DropdownSettings.Options) do
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template
                    CreateDropDown["3d"] = Instance.new("Frame", CreateDropDown["3a"]);
                    CreateDropDown["3d"]["BorderSizePixel"] = 0;
                    CreateDropDown["3d"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                    CreateDropDown["3d"]["AnchorPoint"] = Vector2.new(0, 1);
                    CreateDropDown["3d"]["Size"] = UDim2.new(0.95, 0, 0, 25);
                    CreateDropDown["3d"]["Position"] = UDim2.new(0, 0, 0.0396825410425663, 0);
                    CreateDropDown["3d"]["Name"] = [[Template]];

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template.Title
                    CreateDropDown["3e"] = Instance.new("TextLabel", CreateDropDown["3d"]);
                    CreateDropDown["3e"]["TextWrapped"] = true;
                    CreateDropDown["3e"]["BorderSizePixel"] = 0;
                    CreateDropDown["3e"]["TextScaled"] = true;
                    CreateDropDown["3e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    CreateDropDown["3e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                    CreateDropDown["3e"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
                    CreateDropDown["3e"]["TextSize"] = 14;
                    CreateDropDown["3e"]["TextColor3"] = Color3.fromRGB(241, 241, 241);
                    CreateDropDown["3e"]["AnchorPoint"] = Vector2.new(0, 0.5);
                    CreateDropDown["3e"]["Size"] = UDim2.new(0.5, 0, 0.699999988079071, 0);
                    CreateDropDown["3e"]["Text"] = Option;
                    CreateDropDown["3e"]["Name"] = [[Title]];
                    CreateDropDown["3e"]["BackgroundTransparency"] = 1;
                    CreateDropDown["3e"]["Position"] = UDim2.new(0, 0, 0.42100000381469727, 0);

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template.Interact
                    CreateDropDown["3f"] = Instance.new("TextButton", CreateDropDown["3d"]);
                    CreateDropDown["3f"]["ZIndex"] = 5;
                    CreateDropDown["3f"]["BorderSizePixel"] = 0;
                    CreateDropDown["3f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    CreateDropDown["3f"]["TextSize"] = 1;
                    CreateDropDown["3f"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    CreateDropDown["3f"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
                    CreateDropDown["3f"]["Size"] = UDim2.new(1, 0, 1, 0);
                    CreateDropDown["3f"]["Name"] = [[Interact]];
                    CreateDropDown["3f"]["Text"] = [[]];
                    CreateDropDown["3f"]["BackgroundTransparency"] = 1;

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template.UICorner
                    CreateDropDown["40"] = Instance.new("UICorner", CreateDropDown["3d"]);


                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template.UIPadding
                    CreateDropDown["41"] = Instance.new("UIPadding", CreateDropDown["3d"]);
                    CreateDropDown["41"]["PaddingTop"] = UDim.new(0, 1);
                    CreateDropDown["41"]["PaddingLeft"] = UDim.new(0, 5);

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.CreateDropDown["3a"].Template.UIStroke
                    CreateDropDown["42"] = Instance.new("UIStroke", CreateDropDown["3d"]);
                    CreateDropDown["42"]["Color"] = Color3.fromRGB(118, 117, 117);
                    

                    if DropdownSettings.CurrentOption == Option then
                        CreateDropDown["3d"].BackgroundColor3 = Color3.fromRGB(56, 56, 56)
                    end

                    CreateDropDown["3d"].BackgroundTransparency = 1
                    CreateDropDown["3d"].UIStroke.Transparency = 1
                    CreateDropDown["3d"].Title.TextTransparency = 1


                    CreateDropDown["3d"].Interact.ZIndex = 50
                    CreateDropDown["3d"].Interact.MouseButton1Click:Connect(function()
                        if not DropdownSettings.MultipleOptions and table.find(DropdownSettings.CurrentOption, Option) then 
                            return
                        end

                        if table.find(DropdownSettings.CurrentOption, Option) then
                            table.remove(DropdownSettings.CurrentOption, table.find(DropdownSettings.CurrentOption, Option))
                            if DropdownSettings.MultipleOptions then
                                if #DropdownSettings.CurrentOption == 1 then
                                    CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                                elseif #DropdownSettings.CurrentOption == 0 then
                                    CreateDropDown["44"].Text = "None"
                                else
                                    CreateDropDown["44"].Text = "Various"
                                end
                            else
                                CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                            end
                        else
                            if not DropdownSettings.MultipleOptions then
                                table.clear(DropdownSettings.CurrentOption)
                            end
                            table.insert(DropdownSettings.CurrentOption, Option)
                            if DropdownSettings.MultipleOptions then
                                if #DropdownSettings.CurrentOption == 1 then
                                    CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                                elseif #DropdownSettings.CurrentOption == 0 then
                                    CreateDropDown["44"].Text = "None"
                                else
                                    CreateDropDown["44"].Text = "Various"
                                end
                            else
                                CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                            end
                            tweenservice:Create(CreateDropDown["3d"].UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                            tweenservice:Create(CreateDropDown["3d"], TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundColor3 = Color3.fromRGB(40, 40, 40)}):Play()
                            Debounce = true
                            wait(0.2)
                            tweenservice:Create(CreateDropDown["3d"].UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                        end


                        local Success, Response = pcall(function()
                            DropdownSettings.callback(DropdownSettings.CurrentOption)
                        end)

                        if not Success then
                            tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                            CreateDropDown["39"].Text = "Callback Error"
                            print("Rayfield | "..DropdownSettings.Name.." Callback Error " ..tostring(Response))
                            wait(0.5)
                            CreateDropDown["39"].Text = DropdownSettings.Name
                            tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                        end

                        for _, droption in ipairs(CreateDropDown["3a"]:GetChildren()) do
                            if droption.ClassName == "Frame" and droption.Name ~= "Placeholder" and not table.find(DropdownSettings.CurrentOption, droption.Name) then
                                tweenservice:Create(droption, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundColor3 = Color3.fromRGB(30, 30, 30)}):Play()
                            end
                        end
                        if not DropdownSettings.MultipleOptions then
                            wait(0.1)
                            tweenservice:Create(CreateDropDown["38"], TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Size = UDim2.new(0.9, 0, 0, 30)}):Play()
                            for _, DropdownOpt in ipairs(CreateDropDown["3a"]:GetChildren()) do
                                if DropdownOpt.ClassName == "Frame" and DropdownOpt.Name ~= "Placeholder" then
                                    tweenservice:Create(DropdownOpt, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundTransparency = 1}):Play()
                                    tweenservice:Create(DropdownOpt.UIStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                                    tweenservice:Create(DropdownOpt.Title, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()
                                end
                            end
                            tweenservice:Create(CreateDropDown["3a"], TweenInfo.new(0.3, Enum.EasingStyle.Quint), {ScrollBarImageTransparency = 1}):Play()
                            tweenservice:Create(CreateDropDown["46"], TweenInfo.new(0.7, Enum.EasingStyle.Quint), {Rotation = 180}):Play()	
                            wait(0.35)
                            CreateDropDown["3a"].Visible = false
                        end
                        Debounce = false	
                        SaveConfiguration()
                    end)
                end

                for _, droption in ipairs(CreateDropDown["3a"]:GetChildren()) do
                    if droption.ClassName == "Frame" and droption.Name ~= "Placeholder" then
                        if not table.find(DropdownSettings.CurrentOption, droption.Name) then
                            droption.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                        else
                            droption.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                        end
                    end
                end

                function DropdownSettings:Set(NewOption)

                    DropdownSettings.CurrentOption = NewOption

                    if typeof(DropdownSettings.CurrentOption) == "string" then
                        DropdownSettings.CurrentOption = {DropdownSettings.CurrentOption}
                    end

                    if not DropdownSettings.MultipleOptions then
                        DropdownSettings.CurrentOption = {DropdownSettings.CurrentOption[1]}
                    end

                    if DropdownSettings.MultipleOptions then
                        if #DropdownSettings.CurrentOption == 1 then
                            CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                        elseif #DropdownSettings.CurrentOption == 0 then
                            CreateDropDown["44"].Text = "None"
                        else
                            CreateDropDown["44"].Text = "Various"
                        end
                    else
                        CreateDropDown["44"].Text = DropdownSettings.CurrentOption[1]
                    end


                    local Success, Response = pcall(function()
                        DropdownSettings.callback(NewOption)
                    end)
                    if not Success then
                        tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
                        CreateDropDown["39"].Text = "Callback Error"
                        print("Zephy | "..DropdownSettings.Name.." Callback Error " ..tostring(Response))
                        wait(0.5)
                        CreateDropDown["39"].Text = DropdownSettings.Name
                        tweenservice:Create(CreateDropDown["4a"], TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
                    end

                    for _, droption in ipairs(CreateDropDown["3a"]:GetChildren()) do
                        if droption.ClassName == "Frame" and droption.Name ~= "Placeholder" then
                            if not table.find(DropdownSettings.CurrentOption, droption.Name) then
                                droption.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                            else
                                droption.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                            end
                        end
                    end
                    --SaveConfiguration()
                end
                if Settings.ConfigurationSaving then
                    if Settings.ConfigurationSaving.Enabled and DropdownSettings.Flag then
                        Library.Flags[DropdownSettings.Flag] = DropdownSettings
                    end
                end

                return DropdownSettings
            end
            
            function SectionHolder:AddButton(ButtonSetting)
    
    
                local Button = {
                    hover = false,
                    MouseDown = false,
                }
    
                --render 
                do
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive
                    Button["9f"] = Instance.new("Frame",    SectionHolder["1a"] );
                    Button["9f"]["BorderSizePixel"] = 0;
                    Button["9f"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                    Button["9f"]["Size"] =UDim2.new(0.9, 0, 0, 30);
                    Button["9f"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Button["9f"]["Name"] = [[ButtonInactive]];
                    Button["9f"]["Visible"] = true;
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive.UIStroke
                    Button["8d"] = Instance.new("UIStroke", Button["9f"]);
                    Button["8d"]["Color"] = Color3.fromRGB(118, 117, 117);
                    Button["8d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive.UIPadding
                    Button["7c"] = Instance.new("UIPadding", Button["9f"]);
                    Button["7c"]["PaddingLeft"] = UDim.new(0, 1);
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive.UICorner
                    Button["6c"] = Instance.new("UICorner", Button["9f"]);
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive.Title
                    Button["5c"] = Instance.new("TextLabel", Button["9f"]);
                    Button["5c"]["TextWrapped"] = true;
                    Button["5c"]["BorderSizePixel"] = 0;
                    Button["5c"]["RichText"] = true;
                    Button["5c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    Button["5c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                    Button["5c"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    Button["5c"]["TextSize"] = 20;
                    Button["5c"]["TextScaled"] = true;
    
                    Button["5c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                    Button["5c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    Button["5c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Button["5c"]["Text"] = ButtonSetting.Name;
                    Button["5c"]["Name"] = [[Title]];
                    Button["5c"]["BackgroundTransparency"] = 2;
                    Button["5c"]["Size"] = UDim2.new(0, 100, 0, 20);
                    Button["5c"]["Position"] = UDim2.new(0.29, 0, 0.5, 0);
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.ButtonInactive.button
                    Button["4c"] = Instance.new("TextLabel", Button["9f"]);
                    Button["4c"]["TextWrapped"] = true;
                    Button["4c"]["BorderSizePixel"] = 0;
                    Button["4c"]["RichText"] = true;
                    Button["4c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    Button["4c"]["TextXAlignment"] = Enum.TextXAlignment.Center;
                    Button["4c"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    Button["4c"]["TextSize"] = 15;
                    Button["4c"]["TextScaled"] = false;
                    Button["4c"]["TextColor3"] = Color3.fromRGB(104, 104, 104);
                    Button["4c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    Button["4c"]["Size"] = UDim2.new(0, 100, 0, 20);
                    Button["4c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    Button["4c"]["Text"] = [[Click]];
                    Button["4c"]["Name"] = [[Button]];
                    Button["4c"]["BackgroundTransparency"] = 1;
                    Button["4c"]["Position"] = UDim2.new(0.8, 0,0.5, 0);
    
                end
    
                --logic
                do
    
                    Button["9f"].MouseEnter:Connect(function()
                        Button.hover = true
                        Library:tween(Button["8d"], {Color = Color3.fromRGB(56, 56, 56)})
    
    
                    end) 
    
                    Button["9f"].MouseLeave:Connect(function()
                        Button.hover = false
                        if not Button.MouseDown  then
                            Library:tween(Button["8d"], {Color = Color3.fromRGB(118, 117, 117)})
    
                        end 
                    end)
                    uis.InputBegan:Connect(function(input,gpe)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 and Gui["1"].Enabled and Button.hover then						
                            Button.MouseDown = true
                            Library:tween(Button["8d"], {Color = Color3.fromRGB(200, 200, 200)})
                            Library:tween(Button["9f"], {BackgroundColor3 = Color3.fromRGB(95,95,95)})
                            ButtonSetting.callback()
                        end
    
                    end)
    
                    uis.InputEnded:Connect(function(input,gpe)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Button.MouseDown = false
                            if Button.hover then
                                Library:tween(Button["8d"], {Color = Color3.fromRGB(56, 56, 56)})
                                Library:tween(Button["9f"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
    
                            else
                                Library:tween(Button["8d"], {Color = Color3.fromRGB(118, 117, 117)})
                                Library:tween(Button["9f"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                            end
                        end
    
                    end)
    
                end
    
                return Button
    
            end
            -- Keybind
    
            function SectionHolder:CreateKeybind(KeybindSettings)
    
                local CheckingForKey = false
                local CreateKeybinds = {
                    hover = false,
                    MouseDown = false,
                }
                do
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind
                    CreateKeybinds["1c"] = Instance.new("TextButton",    SectionHolder["1a"] );
                    CreateKeybinds["1c"]["BorderSizePixel"] = 0;
                    CreateKeybinds["1c"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                    CreateKeybinds["1c"]["Size"] = UDim2.new(0.9, 0, 0, 30);
                    CreateKeybinds["1c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    CreateKeybinds["1c"]["Name"] = [[KeyBind]];
                    CreateKeybinds["1c"]["Visible"] = true;
                    CreateKeybinds["1c"]["Text"] = ""
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.UIStroke
                    CreateKeybinds["1d"] = Instance.new("UIStroke", CreateKeybinds["1c"]);
                    CreateKeybinds["1d"]["Color"] = Color3.fromRGB(118, 117, 117);
                    CreateKeybinds["1d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.UIPadding
                    CreateKeybinds["1e"] = Instance.new("UIPadding", CreateKeybinds["1c"]);
                    CreateKeybinds["1e"]["PaddingLeft"] = UDim.new(0, 1);
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.UICorner
                    CreateKeybinds["1f"] = Instance.new("UICorner", CreateKeybinds["1c"]);
    
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.TextBox
                    CreateKeybinds["20"] = Instance.new("TextBox", CreateKeybinds["1c"]);
                    CreateKeybinds["20"]["PlaceholderColor3"] = Color3.fromRGB(180, 180, 180);
                    CreateKeybinds["20"]["BorderSizePixel"] = 0;
                    CreateKeybinds["20"]["RichText"] = true;
                    CreateKeybinds["20"]["TextSize"] = 20;
                    CreateKeybinds["20"]["TextWrapped"] = true;
                    CreateKeybinds["20"]["TextScaled"] = false;
                    CreateKeybinds["20"]["BackgroundColor3"] = Color3.fromRGB(127, 127, 127);
                    CreateKeybinds["20"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                    CreateKeybinds["20"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    CreateKeybinds["20"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    CreateKeybinds["20"]["BackgroundTransparency"] = 1;
                    CreateKeybinds["20"]["PlaceholderText"] = "None";
                    CreateKeybinds["20"]["Size"] = UDim2.new(0.30000001192092896, 0, 0.800000011920929, 0);
                    CreateKeybinds["20"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    CreateKeybinds["20"]["Text"] = KeybindSettings.CurrentKeybind;
                    CreateKeybinds["20"]["Position"] = UDim2.new(0.800000011920929, 0, 0.5, 0);


                    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.TextBox.UICorner
                    CreateKeybinds["21"] = Instance.new("UICorner", CreateKeybinds["20"]);
    
    
                    -- StarterGui.br.Main.ContentContainer.Tabe.Frame.KeyBind.Title
                    CreateKeybinds["22"] = Instance.new("TextLabel", CreateKeybinds["1c"]);
                    CreateKeybinds["22"]["TextWrapped"] = true;
                    CreateKeybinds["22"]["BorderSizePixel"] = 0;
                    CreateKeybinds["22"]["RichText"] = true;
                    CreateKeybinds["22"]["TextScaled"] = true;
                    CreateKeybinds["22"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    CreateKeybinds["22"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                    CreateKeybinds["22"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    CreateKeybinds["22"]["TextSize"] = 20;
                    CreateKeybinds["22"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                    CreateKeybinds["22"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    CreateKeybinds["22"]["Size"] = UDim2.new(0, 100, 0, 20);
                    CreateKeybinds["22"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    CreateKeybinds["22"]["Text"] = KeybindSettings.Name;
                    CreateKeybinds["22"]["Name"] = [[Title]];
                    CreateKeybinds["22"]["BackgroundTransparency"] = 2;
                    CreateKeybinds["22"]["Position"] = UDim2.new(0.3199999928474426, 0, 0.5, 0);
    

                end
                CreateKeybinds["20"].Text = KeybindSettings.CurrentKeybind
                CreateKeybinds["20"].Focused:Connect(function()
                    CheckingForKey = true
                    CreateKeybinds["20"].Text = ""
                end)
    
                
                CreateKeybinds["20"].FocusLost:Connect(function()
                    CheckingForKey = false
                    if 	CreateKeybinds["20"].Text == nil or "" then
                        CreateKeybinds["20"].Text = KeybindSettings.CurrentKeybind
                        SaveConfiguration()
                    end
                end)
    
                CreateKeybinds["1c"].MouseEnter:Connect(function()
                    CreateKeybinds.hover = true
                    Library:tween(CreateKeybinds["1d"], {Color = Color3.fromRGB(56, 56, 56)})
    
                end)
    
                CreateKeybinds["1c"].MouseLeave:Connect(function()
                    CreateKeybinds.hover = false
                    Library:tween(CreateKeybinds["1d"], {Color = Color3.fromRGB(118, 117, 117)})
                end)
    
    
                uis.InputBegan:Connect(function(input, processed)
                    if CheckingForKey then
                        if input.KeyCode ~= Enum.KeyCode.Unknown and input.KeyCode ~= Enum.KeyCode.Equals then
                            local SplitMessage = string.split(tostring(input.KeyCode), ".")
                            local NewKeyNoEnum = SplitMessage[3]
                            CreateKeybinds["20"].Text = tostring(NewKeyNoEnum)
                            KeybindSettings.CurrentKeybind = tostring(NewKeyNoEnum)
                            CreateKeybinds["20"]:ReleaseFocus()
                            SaveConfiguration()
                        end
                    elseif KeybindSettings.CurrentKeybind ~= "None" and (input.KeyCode == Enum.KeyCode[KeybindSettings.CurrentKeybind] and not processed) then -- Test
                        local Held = true
                        local Connection
                        Connection = input.Changed:Connect(function(prop)
                            if prop == "UserInputState" then
                                Connection:Disconnect()
                                Held = false
                            end
                        end)
    
                        if not KeybindSettings.HoldToInteract then
                            local Success, Response = pcall(KeybindSettings.callback)
                            if not Success then
                                CreateKeybinds["22"].Text = "Callback Error"
                                print("Zephy | "..KeybindSettings.Name.." Callback Error " ..tostring(Response))
                                wait(0.5)
                                CreateKeybinds["22"].Text = KeybindSettings.Name
                            end
                        else
                            wait(0.25)
                            if Held then
                                local Loop; Loop = runservice.Stepped:Connect(function()
                                    if not Held then
                                        KeybindSettings.callback(false) -- maybe pcall this
                                        Loop:Disconnect()
                                    else
                                        KeybindSettings.callback(true) -- maybe pcall this
                                    end
                                end)	
                            end
                        
                    end
                        elseif input.UserInputType == Enum.UserInputType.MouseButton1 and Gui["1"].Enabled and CreateKeybinds.hover then						
                            CreateKeybinds.MouseDown = true
                            Library:tween(CreateKeybinds["1d"], {Color = Color3.fromRGB(200, 200, 200)})
                            Library:tween(CreateKeybinds["1c"], {BackgroundColor3 = Color3.fromRGB(95,95,95)})
                    end
                end)
    
                CreateKeybinds["20"]:GetPropertyChangedSignal("Text"):Connect(function()
                    tweenservice:Create(CreateKeybinds["20"], TweenInfo.new(0.55, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0,CreateKeybinds["20"].TextBounds.X + 24, 0, 25)}):Play()
                end)
    
                uis.InputEnded:Connect(function(input,gpe)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        CreateKeybinds.MouseDown = false
                        if CreateKeybinds.hover then
                            Library:tween(CreateKeybinds["1d"], {Color = Color3.fromRGB(56, 56, 56)})
                            Library:tween(CreateKeybinds["1c"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
    
                        else
                            Library:tween(CreateKeybinds["1d"], {Color = Color3.fromRGB(118, 117, 117)})
                            Library:tween(CreateKeybinds["1c"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                        end
                    end
    
                end)		
    
                function KeybindSettings:Set(NewKeybind)
    
                    CreateKeybinds["20"].Text = tostring(NewKeybind)
                    KeybindSettings.CurrentKeybind = tostring(NewKeybind)
                    CreateKeybinds["20"]:ReleaseFocus()
                    SaveConfiguration()
                end
                if Settings.ConfigurationSaving then
                    if Settings.ConfigurationSaving.Enabled and KeybindSettings.Flag then
                        Library.Flags[KeybindSettings.Flag] = KeybindSettings
                    end
                end
                return KeybindSettings
            end
    
            ---slider
            function SectionHolder:CreateSlider(SliderSettings)
                local Dragging = false
                local Slider = {
                    hover = false,
                    MouseDown = false,
                    connection = false
    
                }
    
    --render
                do
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider
                Slider["23"] = Instance.new("TextButton",    SectionHolder["1a"] );
                Slider["23"]["BorderSizePixel"] = 0;
                Slider["23"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                Slider["23"]["Size"] = UDim2.new(0.9, 0, 0, 30);
                Slider["23"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                Slider["23"]["Text"] = ""
                Slider["23"]["Name"] = [[Slider]];
                Slider["23"]["Visible"] = true;
    
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.UIStroke
                Slider["24"] = Instance.new("UIStroke", Slider["23"]);
                Slider["24"]["Color"] = Color3.fromRGB(118, 117, 117);
                Slider["24"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.UIPadding
                Slider["25"] = Instance.new("UIPadding", Slider["23"]);
                Slider["25"]["PaddingLeft"] = UDim.new(0, 1);
    
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.UICorner
                Slider["26"] = Instance.new("UICorner", Slider["23"]);
    
    
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.Value
                Slider["27"] = Instance.new("TextLabel", Slider["23"]);
                Slider["27"]["TextWrapped"] = true;
                Slider["27"]["BorderSizePixel"] = 0;
                Slider["27"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                Slider["27"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                Slider["27"]["TextSize"] = 14;
                Slider["27"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                Slider["27"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                Slider["27"]["Size"] = UDim2.new(0, 70, 0, 20);
                Slider["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                Slider["27"]["Text"] = [[0]];
                Slider["27"]["Name"] = [[Value]];
                Slider["27"]["BackgroundTransparency"] = 2;
                Slider["27"]["Position"] = UDim2.new(0.8, 0, 0.35, 0);
    
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack
                Slider["28"] = Instance.new("Frame", Slider["23"]);
                Slider["28"]["BorderSizePixel"] = 0;
                Slider["28"]["BackgroundColor3"] = Color3.fromRGB(66, 66, 66);
                Slider["28"]["AnchorPoint"] = Vector2.new(0, 1);
                Slider["28"]["Size"] = UDim2.new(0.949999988079071, 0, 0, 5);
                Slider["28"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                Slider["28"]["Position"] = UDim2.new(0, 8, 0.800000011920929, 0);
                Slider["28"]["Name"] = [[SlideBack]];
                Slider["28"]["ClipsDescendants"] = true
    
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack.UICorner
                Slider["29"] = Instance.new("UICorner", Slider["28"]);
    
    
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack.UIStroke
                Slider["2a"] = Instance.new("UIStroke", Slider["28"]);
                Slider["2a"]["Color"] = Color3.fromRGB(91, 91, 91);
                Slider["2a"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
    
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack.Dragger
                Slider["2b"] = Instance.new("Frame", Slider["28"]);
                Slider["2b"]["BorderSizePixel"] = 0;
                Slider["2b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                Slider["2b"]["Size"] = UDim2.new(0, 0, 1, 0);
                Slider["2b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                Slider["2b"]["Name"] = [[Dragger]];
    
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack.Dragger.UIStroke
                Slider["2c"] = Instance.new("UIStroke", Slider["2b"]);
                Slider["2c"]["Color"] = Color3.fromRGB(103, 102, 102);
    
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.SlideBack.Dragger.UICorner
                Slider["2d"] = Instance.new("UICorner", Slider["2b"]);
    
    
                -- StarterGui.br.Main.ContentContainer.Tabe.Frame.Slider.title
                Slider["2e"] = Instance.new("TextLabel", Slider["23"]);
                Slider["2e"]["TextWrapped"] = true;
                Slider["2e"]["BorderSizePixel"] = 0;
                Slider["2e"]["TextScaled"] = true;
                Slider["2e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                Slider["2e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                Slider["2e"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                Slider["2e"]["TextSize"] = 14;
                Slider["2e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                Slider["2e"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                Slider["2e"]["Size"] = UDim2.new(0, 100, 0, 20);
                Slider["2e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                Slider["2e"]["Text"] = SliderSettings.Name;
                Slider["2e"]["Name"] = [[title]];
                Slider["2e"]["BackgroundTransparency"] = 2;
                Slider["2e"]["Position"] = UDim2.new(0.29, 0, 0.35, 0);

                end
    
    
              
    
               
                Slider["2b"].Size =	UDim2.new(0, Slider["23"].AbsoluteSize.X * ((SliderSettings.CurrentValue + SliderSettings.Range[1]) / (SliderSettings.Range[2] - SliderSettings.Range[1])) > 5 and Slider["23"].AbsoluteSize.X * (SliderSettings.CurrentValue / (SliderSettings.Range[2] - SliderSettings.Range[1])) or 5, 1, 0)
                
                if not SliderSettings.Suffix then
                    Slider["27"].Text = tostring(SliderSettings.CurrentValue)
                else
                    Slider["27"].Text = tostring(SliderSettings.CurrentValue) .. " " .. SliderSettings.Suffix
                end
    
    
                Slider["23"].MouseEnter:Connect(function()
                    Slider.hover = true
                    Library:tween(Slider["24"], {Color = Color3.fromRGB(56, 56, 56)})
                    Library:tween(Slider["2a"], {Color = Color3.fromRGB(56, 56, 56)})
                    Library:tween(Slider["2b"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)}) 
                end) 
    
                Slider["23"].MouseLeave:Connect(function()
                    Slider.hover = false
                    if not Slider.MouseDown  then
                        Library:tween(Slider["24"], {Color = Color3.fromRGB(95,95,95)})
                        Library:tween(Slider["2b"], {BackgroundColor3 = Color3.fromRGB(255, 255, 255)})
    
                    end 
                end)
    
                uis.InputBegan:Connect(function(input,gpe)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 and Gui["1"].Enabled and Slider.hover then						
                        Slider.MouseDown = true
                        Dragging = true 
                        Library:tween(Slider["23"], {BackgroundColor3 = Color3.fromRGB(110,110,110)})
                        Library:tween(Slider["24"], {Color = Color3.fromRGB(200, 200, 200)})
                        Library:tween(Slider["2a"], {Color = Color3.fromRGB(200, 200, 200)})
                        Library:tween(Slider["2b"], {BackgroundColor3 = Color3.fromRGB(56,56,56)})
                    end
                end)
    
                uis.InputEnded:Connect(function(input,gpe)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Slider.MouseDown = false
                        Dragging = false 
    
                        if Slider.hover then
                            Library:tween(Slider["23"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                            Library:tween(Slider["24"], {Color = Color3.fromRGB(95,95,95)})
                            Library:tween(Slider["2a"], {Color = Color3.fromRGB(95,95,95)})
                            Library:tween(Slider["2b"], {BackgroundColor3 = Color3.fromRGB(95,95,95)})
    
                        else
                            Library:tween(Slider["23"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                            Library:tween(Slider["24"], {Color = Color3.fromRGB(95,95,95)})
                            Library:tween(Slider["2a"], {Color = Color3.fromRGB(95,95,95)})
                            Library:tween(Slider["2b"], {BackgroundColor3 = Color3.fromRGB(255,255,255)})
    
                        end
                        if Slider.connection then Slider.connection:Disconnect() end
                        Slider.connection = nil
                    end
    
                end)
               
    
                Slider["23"].MouseButton1Down:Connect(function(X)
                    if Gui["1"].Enabled and Slider.hover then
    
                        local Current = Slider["2b"].AbsolutePosition.X + Slider["2b"].AbsoluteSize.X
                        local Start = Current
                        local Location = X
                        local Loop; Loop = runservice.Stepped:Connect(function()
                            if Dragging then
                                Location = uis:GetMouseLocation().X
                                Current = Current + 0.025 * (Location - Start)
        
                                if Location < Slider["23"].AbsolutePosition.X then
                                    Location =  Slider["23"].AbsolutePosition.X
                                elseif Location >  Slider["23"].AbsolutePosition.X + Slider["23"].AbsoluteSize.X then
                                    Location =  Slider["23"].AbsolutePosition.X +Slider["23"].AbsoluteSize.X
                                end
        
                                if Current < Slider["23"].AbsolutePosition.X + 5 then
                                    Current = Slider["23"].AbsolutePosition.X + 5
                                elseif Current > Slider["23"].AbsolutePosition.X + Slider["23"].AbsoluteSize.X then
                                    Current = Slider["23"].AbsolutePosition.X + Slider["23"].AbsoluteSize.X
                                end
        
                                if Current <= Location and (Location - Start) < 0 then
                                    Start = Location
                                elseif Current >= Location and (Location - Start) > 0 then
                                    Start = Location
                                end
                                Slider["2b"].Size = UDim2.new(0, Current -Slider["23"].AbsolutePosition.X, 1, 0)
                                local NewValue = SliderSettings.Range[1] + (Location - Slider["23"].AbsolutePosition.X) / Slider["23"].AbsoluteSize.X * (SliderSettings.Range[2] - SliderSettings.Range[1])
        
                                NewValue = math.floor(NewValue / SliderSettings.Increment + 0.5) * (SliderSettings.Increment * 10000000) / 10000000
                                if not SliderSettings.Suffix then
                                    Slider["27"].Text = tostring(NewValue)
                                else
                                    Slider["27"].Text = tostring(NewValue) .. " " .. SliderSettings.Suffix
                                end
        
                                if SliderSettings.CurrentValue ~= NewValue then
                                    local Success, Response = pcall(function()
                                        SliderSettings.callback(NewValue)
                                    end)
                                    if not Success then
                                        Slider["2e"].Text = "Callback Error"
                                        print("zephy | "..SliderSettings.Name.." Callback Error " ..tostring(Response))
                                        wait(0.5)
                                        Slider["2e"].Text = SliderSettings.Name
                                    end
        
                                    SliderSettings.CurrentValue = NewValue
                                    SaveConfiguration()
                                end
                            else
                                Slider["2b"].Size = UDim2.new(0, Location - Slider["23"].AbsolutePosition.X > 5 and Location - Slider["23"].AbsolutePosition.X or 5, 1, 0)
                                Loop:Disconnect()
                            end
                        end)
                    end
                end)
    
                function SliderSettings:Set(NewVal)
    
                    Slider["2b"].Size = UDim2.new(0, Slider["23"].AbsoluteSize.X * ((NewVal + SliderSettings.Range[1]) / (SliderSettings.Range[2] - SliderSettings.Range[1])) > 5 and Slider["23"].AbsoluteSize.X * (NewVal / (SliderSettings.Range[2] - SliderSettings.Range[1])) or 5, 1, 0)
                    Slider["27"].Text= tostring(NewVal) .. " " .. SliderSettings.Suffix
                    local Success, Response = pcall(function()
                        SliderSettings.callback(NewVal)
                    end)
                    if not Success then
                        Slider["2e"].Text = "Callback Error"
                        print("zephy | "..SliderSettings.Name.." Callback Error " ..tostring(Response))
                        wait(0.5)
                        Slider["2e"].Text = SliderSettings.Name
                     end
                    SliderSettings.CurrentValue = NewVal
                    SaveConfiguration()
                end
                if Settings.ConfigurationSaving then
                    if Settings.ConfigurationSaving.Enabled and SliderSettings.Flag then
                        Library.Flags[SliderSettings.Flag] = SliderSettings
                    end
                end
                return SliderSettings
            end

            
            -- Input
    
            function SectionHolder:CreateInput(InputSettings)
                local TextBox = {
                    hover = false,
                    MouseDown = false,
                }	
                --render 
                do
                    -- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.textbutton
                    TextBox["96"] = Instance.new("Frame",    SectionHolder["1a"] );
                    TextBox["96"]["BorderSizePixel"] = 0;
                    TextBox["96"]["BackgroundColor3"] = Color3.fromRGB(56, 56, 56);
                    TextBox["96"]["Size"] = UDim2.new(0.9, 0, 0, 30);
                    TextBox["96"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    TextBox["96"]["Name"] = [[textbox]];
                    -- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.textbox.UICorner
                    TextBox["97"] = Instance.new("UICorner", TextBox["96"]);
    
    
                    -- StarterGui.qwtq.Main.ContentContainer.HomeTab.KeyBind.Title
                    TextBox["105"] = Instance.new("TextLabel", TextBox["96"]);
                    TextBox["105"]["TextWrapped"] = true;
                    TextBox["105"]["BorderSizePixel"] = 0;
                    TextBox["105"]["TextScaled"] = true;
                    TextBox["105"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
                    TextBox["105"]["TextXAlignment"] = Enum.TextXAlignment.Left;
                    TextBox["105"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    TextBox["105"]["TextSize"] = 14;
                    TextBox["105"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                    TextBox["105"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    TextBox["105"]["Size"] = UDim2.new(0, 100, 0, 20);
                    TextBox["105"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    TextBox["105"]["Text"] = InputSettings.Name;
                    TextBox["105"]["Name"] = [[Title]];
                    TextBox["105"]["BackgroundTransparency"] = 2;
                    TextBox["105"]["Position"] = UDim2.new(0.29, 0, 0.5, 0);
    
                    -- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.textbox.Title
                    TextBox["98"] = Instance.new("TextBox", TextBox["96"]);
                    TextBox["98"]["TextWrapped"] = true;
                    TextBox["98"]["BorderSizePixel"] = 0;
                    TextBox["98"]["TextScaled"] = true;
                    TextBox["98"]["BackgroundColor3"] = Color3.fromRGB(126, 126, 126);
                    TextBox["98"]["TextXAlignment"] = Enum.TextXAlignment.Center;
                    TextBox["98"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
                    TextBox["98"]["TextSize"] = 14;
                    TextBox["98"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
                    TextBox["98"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
                    TextBox["98"]["Size"] = UDim2.new(0, 70, 0, 25);
                    TextBox["98"]["PlaceholderColor3"] = Color3.fromRGB(179, 179, 179)
                    TextBox["98"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
                    TextBox["98"]["Text"] = "";
                    TextBox["98"]["Name"] = [[Title]];
                    TextBox["98"]["BackgroundTransparency"] = 0.9;
                    TextBox["98"]["Position"] = UDim2.new(0.8, 0,0.5, 0);
                    TextBox["98"]["PlaceholderText"] = InputSettings.PlaceholderText
    
    
                    TextBox["101"] = Instance.new("UICorner", TextBox["98"]);
    
                    -- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.textbox.UIPadding
                    TextBox["99"] = Instance.new("UIPadding", TextBox["96"]);
                    TextBox["99"]["PaddingLeft"] = UDim.new(0, 1);
    
                    -- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.textbox.UIStroke
                    TextBox["100"] = Instance.new("UIStroke", TextBox["96"]);
                    TextBox["100"]["Color"] = Color3.fromRGB(118, 117, 117);
                    TextBox["100"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

                end
    
                TextBox["98"].PlaceholderText = InputSettings.PlaceholderText
    
                TextBox["98"].FocusLost:Connect(function()
                    local Success, Response = pcall(function()
                        InputSettings.callback(TextBox["98"].Text)
                        InputSettings.CurrentValue = TextBox["98"].Text
                        
                        SaveConfiguration()
                    end)
                    
                    
                    if not Success then
                        TextBox["105"].Text = "Callback Error"
                        print("Zephy | "..InputSettings.Name.." Callback Error " ..tostring(Response))
                        wait(0.5)
                        TextBox["105"].Text = InputSettings.Name
                    end
    
    
                    if InputSettings.RemoveTextAfterFocusLost then
                        TextBox["98"].Text = ""
                    end
                    SaveConfiguration()
    
                end)
    
         TextBox["96"].MouseEnter:Connect(function()
                    TextBox.hover = true
                    Library:tween(TextBox["100"], {Color = Color3.fromRGB(56, 56, 56)})
                end)
    
                TextBox["96"].MouseLeave:Connect(function()
                    TextBox.hover = false
                    if not TextBox.MouseDown  then
                        Library:tween(TextBox["100"], {Color = Color3.fromRGB(118, 117, 117)})
                    end 
                end)
    
                uis.InputBegan:Connect(function(input,gpe)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 and Gui["1"].Enabled and TextBox.hover then						
                        TextBox.MouseDown = true
                        Library:tween(TextBox["100"], {Color = Color3.fromRGB(200, 200, 200)})
                        Library:tween(TextBox["96"], {BackgroundColor3 = Color3.fromRGB(95,95,95)})
                    end
    
                end)
    
                uis.InputEnded:Connect(function(input,gpe)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        TextBox.MouseDown = false
                        if TextBox.hover then
                            Library:tween(TextBox["100"], {Color = Color3.fromRGB(56, 56, 56)})
                            Library:tween(TextBox["96"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
    
                        else
                            Library:tween(TextBox["100"], {Color = Color3.fromRGB(118, 117, 117)})
                            Library:tween(TextBox["96"], {BackgroundColor3 = Color3.fromRGB(56, 56, 56)})
                        end
                    end
    
                end)
                function InputSettings:Set(NewVal)
    
                    TextBox["98"].Text = tostring(NewVal)
                    InputSettings.CurrentValue = tostring(NewVal)
                    TextBox["98"]:ReleaseFocus()
                    SaveConfiguration()
                end
                if Settings.ConfigurationSaving then
                    if Settings.ConfigurationSaving.Enabled and InputSettings.Flag then
                        Library.Flags[InputSettings.Flag] = InputSettings
                    end
                end
            return InputSettings
            end
    
    
        
            return SectionHolder
        end

        --methods
        function Tab:Activate()
            if not Tab.Active  then
                if Gui.CurrentTab ~= nil then
                    Gui.CurrentTab:Deactivate()	

                end
                Tab.Active = true
                Library:tween(Tab["19"] , {TextColor3 = Color3.fromRGB(149, 149, 149)})
                Tab["15"]["Visible"] = true
                Gui.CurrentTab = Tab
            end
        end
        function Tab:Deactivate()
            if Tab.Active then
                Tab.Active = false
                Tab.hover = false 
                Library:tween(Tab["19"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
                Tab["15"]["Visible"] = false

            end
        end

        --logic 
        do

            Tab["19"].MouseEnter:Connect(function()
                Tab.hover = true
                if not Tab.Active then
                    Library:tween(Tab["19"], {TextColor3 = Color3.fromRGB(125, 125, 125)})

                end

            end)

            Tab["19"].MouseLeave:Connect(function()
                Tab.hover = false
                if not Tab.Active then
                    Library:tween(Tab["19"], {TextColor3 = Color3.fromRGB(255, 255, 255)})

                end
            end)

            uis.InputBegan:Connect(function(input, gpe)
                if gpe then return end
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if Gui["1"].Enabled and Tab.hover then
                        Tab:Activate()

                    end

                end
            end)

            if Gui.CurrentTab == nil then
                Tab:Activate()

            end
        end

		
        return Tab
    end		
    return Gui
end


function Library:LoadConfiguration()
    if CEnabled then
        pcall(function()
            if isfile(ConfigurationFolder .. "/" .. CFileName .. ConfigurationExtension) then
                LoadConfiguration(readfile(ConfigurationFolder .. "/" .. CFileName .. ConfigurationExtension))
        print("Configuration Loaded", "The configuration file for this script has been loaded from a previous session")
            end
        end)
    end
end

task.delay(2, Library.LoadConfiguration, Library)

local Gui = Library:CreateWindow({name = "Tawfeek Hub",
ConfigurationSaving = {
    Enabled = true,
    FolderName = "TawfeekHub", -- Create a custom folder for your hub/game
    FileName = "Tawfeek",
}}) 

local Tab = Gui:CreateTab({Name = "Local Player"}) 
local Tab2 = Gui:CreateTab({Name = "Others"}) 

--[Main Variables]

local Section1 = Tab:SectionHolder({
    name = "Local Player",
    OpenSection = true,

})

local Section2 = Tab:SectionHolder2({
    name = "Esp",
    OpenSection = true,
})

local Section3 = Tab2:SectionHolder({
    name = "KeyBinds",
    OpenSection = true,
})

local Section4 = Tab2:SectionHolder2({
    name = "HitBox",
    OpenSection = true,
})

local bif = false
local hitboxrodando = false
local globalhitboxtable = {}

local velociyy = 16

local podeocr = true
local nostun = false

local function calculateRawMoveVector(humanoid, cameraRelativeMoveVector)
	local camera = game.Workspace.CurrentCamera
	if not camera then
		return cameraRelativeMoveVector
	end

	if humanoid:GetState() == Enum.HumanoidStateType.Swimming then
		return camera.CFrame:VectorToWorldSpace(cameraRelativeMoveVector)
	end

	local cameraCFrame = camera.CFrame

	local c, s
	local _, _, _, R00, R01, R02, _, _, R12, _, _, R22 = cameraCFrame:GetComponents()
	if R12 < 1 and R12 > -1 then
		-- X and Z components from back vector.
		c = R22
		s = R02
	else
		-- In this case the camera is looking straight up or straight down.
		-- Use X components from right and up vectors.
		c = R00
		s = -R01 * math.sign(R12)
	end
	local norm = math.sqrt(c * c + s * s)
	return Vector3.new(
		(c * cameraRelativeMoveVector.X + s * cameraRelativeMoveVector.Z) / norm,
		0,
		(c * cameraRelativeMoveVector.Z - s * cameraRelativeMoveVector.X) / norm
	)
end

--local GetMoveVector2 = require(PlayerModule:WaitForChild("ControlModule"))
local player = game.Players.LocalPlayer
local GetMoveVector2  = game.Players.LocalPlayer.Character.Humanoid.MoveDirection

local WalkSpeedToggle = false


-- Create the toggle

local Toggle = Section1:AddToggle({
    Name = "Walk Speed",
    Flag = "Walkspeed",
    CurrentValue = false,
    callback = function(Value)
		WalkSpeedToggle = Value
    end,
    
})


local Toggle = Section1:AddToggle({
     Name = "No Stun",
    Flag = "NoStun",
    CurrentValue = false,
    callback = function(Value)
		nostun = Value
    end,
})

local Slider = Section1:CreateSlider({
    Name = "Walk Speed",
    Range = {16, 100},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "WalkSpeed", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    callback = function(Value)
		velociyy = Value
    end,
})

game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = velociyy

spawn(function()
	while true do
		wait()
		if WalkSpeedToggle == false then
			continue
		end
		pcall(function()
			local GetMoveVector = calculateRawMoveVector(game.Players.LocalPlayer.Character.Humanoid, GetMoveVector2)
			local moveDirection = game.Players.LocalPlayer.Character.Humanoid.MoveDirection

			if (moveDirection.Magnitude == 0 and nostun == true) then
				game.Players.LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = (Vector3.new(GetMoveVector.X, 0, GetMoveVector.Z) * velociyy) + Vector3.new(0, game.Players.LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity.Y, 0)
			else
				game.Players.LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity = (Vector3.new(moveDirection.X, 0, moveDirection.Z) * velociyy) + Vector3.new(0, game.Players.LocalPlayer.Character.HumanoidRootPart.AssemblyLinearVelocity.Y, 0)
			end
		end)
	end
end)

getfenv().LPH_NO_VIRTUALIZE = function(f) return f end;


--[Main Variables]
LPH_NO_VIRTUALIZE(function()
	local plrs = game:GetService("Players")
	local rs = game:GetService("RunService")
	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local UserInputService = game:GetService("UserInputService")
	local Lighting = game:GetService("Lighting")
	local Teams = game:GetService("Teams")
	local RunService = game:GetService("RunService")
	local TeleportService = game:GetService("TeleportService")


	local LocalPlayer = Players.LocalPlayer
	local Mouse = LocalPlayer:GetMouse()
	local CurrentCamera = workspace.CurrentCamera
	local plr = plrs.LocalPlayer
	local mouse = plr:GetMouse()
	local camera = workspace.CurrentCamera
	local worldToViewportPoint = camera.worldToViewportPoint
	local cc = Instance.new("ColorCorrectionEffect", game.Lighting)
	local blur = Instance.new("BlurEffect", game.Lighting)
	local sun = Instance.new("SunRaysEffect", game.Lighting)
	blur.Size = 0
	sun.Intensity = 0

	--[Optimisation Variables]

	local Drawingnew = Drawing.new
	local Color3fromRGB = Color3.fromRGB
	local Vector3new = Vector3.new
	local Vector2new = Vector2.new
	local mathfloor = math.floor
	local mathceil = math.ceil

	--[Setup Table]

	local esp = {
		players = {},
		enabled = false,
		teamcheck = false,
		fontsize = 18,
		font = "Ubuntu",
		settings = {
			name = {enabled = true, outline = false, color = Color3fromRGB(255, 255, 255), outlineColor = Color3fromRGB(94, 0, 255)},
			box = {enabled = true, outline = false, color = Color3fromRGB(255, 255, 255), outlineColor = Color3fromRGB(0, 0, 0)},
			healthbar = {enabled = true, outline = false, color = Color3fromRGB(117, 255, 90), outlineColor = Color3fromRGB(0, 0, 0)},
			healthtext = {enabled = true, outline = false, color = Color3fromRGB(255, 255, 255), outlineColor = Color3fromRGB(94, 0, 255)},
			distance = {enabled = true, outline = false, color = Color3fromRGB(255, 255, 255), outlineColor = Color3fromRGB(94, 0, 255)}
		}
	}

	esp.NewDrawing = function(type, properties)
		local newDrawing = Drawingnew(type)

		for i,v in next, properties or {} do
			newDrawing[i] = v
		end

		return newDrawing
	end

	esp.NewPlayer = function(v)
		esp.players[v] = {
			name = esp.NewDrawing("Text", {Color = Color3fromRGB(94, 0, 255), Outline = true, Center = true, Size = 13, Font = 0}),
			boxOutline = esp.NewDrawing("Square", {Color = Color3fromRGB(0, 0, 0), Thickness = 3}),
			box = esp.NewDrawing("Square", {Color = Color3fromRGB(108, 11, 204), Thickness = 1}),
			healthBarOutline = esp.NewDrawing("Line", {Color = Color3fromRGB(0, 0, 0), Thickness = 3}),
			healthBar = esp.NewDrawing("Line", {Color = Color3fromRGB(255, 255, 255), Thickness = 4}),
			healthText = esp.NewDrawing("Text", {Color = Color3fromRGB(94, 0, 255), Outline = true, Center = true, Size = 13, Font = 0}),
			distance = esp.NewDrawing("Text", {Color = Color3fromRGB(94, 0, 255), Outline = true, Center = true, Size = 13, Font = 0})
		}
	end

	for _,v in ipairs(plrs:GetPlayers()) do
		esp.NewPlayer(v)
	end

	plrs.PlayerAdded:Connect(function(v)
		esp.NewPlayer(v)
	end)

	plrs.PlayerRemoving:Connect(function(v)
		for i,v in pairs(esp.players[v]) do
			v:Remove()
		end
		esp.players[v] = nil
	end)

	local mainLoop = rs.RenderStepped:Connect(function()
		for i,v in pairs(esp.players) do
			if i ~= plr and i.Character and i.Character:FindFirstChild("Humanoid") and i.Character:FindFirstChild("HumanoidRootPart") and i.Character:FindFirstChild("Head") then
				local hum = i.Character.Humanoid
				local hrp = i.Character.HumanoidRootPart
				local head = i.Character.Head

				local Vector, onScreen = camera:WorldToViewportPoint(i.Character.HumanoidRootPart.Position)

				local Size = (camera:WorldToViewportPoint(hrp.Position - Vector3new(0, 3, 0)).Y - camera:WorldToViewportPoint(hrp.Position + Vector3new(0, 2.6, 0)).Y) / 2
				local BoxSize = Vector2new(mathfloor(Size * 1.5), mathfloor(Size * 1.9))
				local BoxPos = Vector2new(mathfloor(Vector.X - Size * 1.5 / 2), mathfloor(Vector.Y - Size * 1.6 / 2))

				local BottomOffset = BoxSize.Y + BoxPos.Y + 1

				if onScreen and esp.enabled then
					if esp.settings.name.enabled then
						v.name.Position = Vector2new(BoxSize.X / 2 + BoxPos.X, BoxPos.Y - 16)
						v.name.Outline = esp.settings.name.outline
						v.name.Text = tostring(i)
						v.name.Color = esp.settings.name.color
						v.name.OutlineColor = esp.settings.name.outlineColor
						v.name.Font = esp.font
						v.name.Size = esp.fontsize

						v.name.Visible = true
					else
						v.name.Visible = false
					end

					if esp.settings.distance.enabled and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
						v.distance.Position = Vector2new(BoxSize.X / 2 + BoxPos.X, BottomOffset)
						v.distance.Outline = esp.settings.distance.outline
						v.distance.Text = "[" .. mathfloor((hrp.Position - plr.Character.HumanoidRootPart.Position).Magnitude) .. "m]"
						v.distance.Color = esp.settings.distance.color
						v.distance.OutlineColor = esp.settings.distance.outlineColor
						BottomOffset = BottomOffset + 15

						v.distance.Font = esp.font
						v.distance.Size = esp.fontsize

						v.distance.Visible = true
					else
						v.distance.Visible = false
					end

					if esp.settings.box.enabled then
						v.boxOutline.Size = BoxSize
						v.boxOutline.Position = BoxPos
						v.boxOutline.Visible = esp.settings.box.outline
						v.boxOutline.Color = esp.settings.box.outlineColor

						v.box.Size = BoxSize
						v.box.Position = BoxPos
						v.box.Color = esp.settings.box.color
						v.box.Visible = true
					else
						v.boxOutline.Visible = false
						v.box.Visible = false
					end

					if esp.settings.healthbar.enabled then
						v.healthBar.From = Vector2new((BoxPos.X - 5), BoxPos.Y + BoxSize.Y)
						v.healthBar.To = Vector2new(v.healthBar.From.X, v.healthBar.From.Y - (hum.Health / hum.MaxHealth) * BoxSize.Y)
						v.healthBar.Color = esp.settings.healthbar.color
						v.healthBar.Visible = true

						v.healthBarOutline.From = Vector2new(v.healthBar.From.X, BoxPos.Y + BoxSize.Y + 1)
						v.healthBarOutline.To = Vector2new(v.healthBar.From.X, (v.healthBar.From.Y - 1 * BoxSize.Y) -1)
						v.healthBarOutline.Color = esp.settings.healthbar.outlineColor
						v.healthBarOutline.Visible = esp.settings.healthbar.outline
					else
						v.healthBarOutline.Visible = false
						v.healthBar.Visible = false
					end

					if esp.settings.healthtext.enabled then
						v.healthText.Text = tostring(mathfloor((hum.Health / hum.MaxHealth) * 100 + 0.5))
						v.healthText.Position = Vector2new((BoxPos.X - 20), (BoxPos.Y + BoxSize.Y - 1 * BoxSize.Y) -1)
						v.healthText.Color = esp.settings.healthtext.color
						v.healthText.OutlineColor = esp.settings.healthtext.outlineColor
						v.healthText.Outline = esp.settings.healthtext.outline

						v.healthText.Font = esp.font
						v.healthText.Size = esp.fontsize

						v.healthText.Visible = true
					else
						v.healthText.Visible = false
					end

					if esp.teamcheck then
						if v.TeamColor ~= plr.TeamColor then
							v.name.Visible = esp.settings.name.enabled
							v.box.Visible = esp.settings.box.enabled
							v.healthBar.Visible = esp.settings.healthbar.enabled
							v.healthText.Visible = esp.settings.healthtext.enabled
							v.distance.Visible = esp.settings.distance.enabled
						else
							v.name.Visible = false
							v.boxOutline.Visible = false
							v.box.Visible = false
							v.healthBarOutline.Visible = false
							v.healthBar.Visible = false
							v.healthText.Visible = false
							v.distance.Visible = false
						end
					end
				else
					v.name.Visible = false
					v.boxOutline.Visible = false
					v.box.Visible = false
					v.healthBarOutline.Visible = false
					v.healthBar.Visible = false
					v.healthText.Visible = false
					v.distance.Visible = false
				end
			else
				v.name.Visible = false
				v.boxOutline.Visible = false
				v.box.Visible = false
				v.healthBarOutline.Visible = false
				v.healthBar.Visible = false
				v.healthText.Visible = false
				v.distance.Visible = false
			end
		end
	end)

	getgenv().esp = esp
end)()

function esp()
	local tesp = {}

	function tesp.New()
		local mainesp = {}
		local saveditems = {}
		local savedplayers = {}
		local basefunctions = {}

		game:GetService('RunService').Heartbeat:connect(function()
			for i,v in pairs(basefunctions) do
				local podepa = v()
				if podepa == false then
					table.remove(basefunctions,i)
				end
			end
		end)

		local function Convert(part)
			local screen = workspace.CurrentCamera:WorldToViewportPoint(part.Position)
			return Vector2.new(screen.X, screen.Y)
		end

		local function Convertp(part)
			local screen = workspace.CurrentCamera:WorldToViewportPoint(part)
			return Vector2.new(screen.X, screen.Y)
		end



		function mainesp:ClearPlayers()

			for i,v in pairs(savedplayers) do
				if v ~= nil then
					pcall(function()
						v.box:Remove()
						v.nome:Remove()
					end)
					savedplayers[i] = nil
				end
			end

		end

		function mainesp:ClearObjects()

			for i,v in pairs(saveditems) do
				if v ~= nil then
					pcall(function()
						saveditems[i]:Remove()
					end)
					saveditems[i] = nil
				end
			end

		end



		function mainesp:ESPPLAYERS(player,name,box)
			if not player or not player:FindFirstChild("HumanoidRootPart") or not player:FindFirstChild("Humanoid") then
				return 
			end
			if savedplayers[player] ~= nil then
				return
			end
			local julgui
			julgui = coroutine.create(function()
				local tabelaesp = {}
				local new_drawing = Drawing.new;
				local new_color3 = Color3.new;
				local camera = workspace.CurrentCamera;
				local get_pivot = workspace.GetPivot;
				local wtvp = camera.WorldToViewportPoint;
				local new_vector2 = Vector2.new;
				local rad = math.rad;
				local tan = math.tan;
				local floor = math.floor;
				tabelaesp.box = new_drawing("Square", true);
				tabelaesp.box.Color = Color3.new(1,1,0);
				tabelaesp.box.Thickness = 1;
				tabelaesp.box.Visible = true
				tabelaesp.nome = new_drawing("Text")
				tabelaesp.nome.Text = player.Name .. ' | ' .. math.round(player.Humanoid.Health) .. "/" .. math.round(player.Humanoid.MaxHealth)
				tabelaesp.nome.Color = Color3.new(0.333333, 1, 0)
				tabelaesp.nome.Position = Convertp(player.Head.Position + Vector3.new(0,10,0))
				tabelaesp.nome.Size = 20
				tabelaesp.nome.Visible = true
				tabelaesp.nome.Center = true



				local character = player
				local part = player.HumanoidRootPart

				local bala = nil
				local function matadordeesp()
					savedplayers[player] = nil
					tabelaesp.box:Remove()
					tabelaesp.nome:Remove()

				end

				savedplayers[player] = tabelaesp

				bala = function()
					local sucess,errp =	pcall(function()

						local destroyed = part:IsDescendantOf(workspace)
						if destroyed == false then
							matadordeesp()
						end



						local _,screen = workspace.CurrentCamera:WorldToViewportPoint(part.Position)
						if screen then
							if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - player.HumanoidRootPart.Position).Magnitude > 3000 then
								tabelaesp.box.Visible = false
								tabelaesp.nome.Visible = false
							else
								local cframe = get_pivot(character);
								local position, visible = wtvp(camera, cframe.Position);
								local scale_factor = 1 / (position.Z * tan(rad(camera.FieldOfView * 0.5)) * 2) * 100;
								local width, height = floor(35 * scale_factor), floor(50 * scale_factor);
								local x, y = floor(position.X), floor(position.Y);
								tabelaesp.box.Size = new_vector2(width, height);
								tabelaesp.box.Position = new_vector2(floor(x - width * 0.5), floor(y - height * 0.5));
								tabelaesp.nome.Position = Convertp(player.Head.Position + Vector3.new(0,10,0))
								tabelaesp.box.Visible = true
								tabelaesp.nome.Visible = true
								tabelaesp.nome.Text = player.Name .. ' | ' .. math.round(player.Humanoid.Health) .. "/" .. math.round(player.Humanoid.MaxHealth) .. " | " .. game:GetService("ReplicatedStorage")["Stats" .. player.Name].Stats.DF.Value
							end
						else
							tabelaesp.box.Visible = false
							tabelaesp.nome.Visible = false
						end

					end)
					if sucess == false then
						pcall(function()
							matadordeesp()
						end)
						return false
					else
						return true
					end
				end
				table.insert(basefunctions,bala)
			end)

			coroutine.resume(julgui)
			return 
		end


		function mainesp:ESP(part, text, color,grau)
			if saveditems[part] ~= nil then
				return
			end

			local kafgo

			kafgo = coroutine.create(function()



				local nome = Drawing.new("Text")
				saveditems[part] = nome
				local function autodestruction()
					nome:Remove()
					saveditems[part] = nil
				end

				nome.Text = text
				nome.Color = color
				nome.Position = Convert(part)
				nome.Size = grau
				nome.Visible = true
				local cu
				cu = function()


					local sucess,errorr = pcall(function()
						local destroyed = part:IsDescendantOf(workspace)
						if destroyed == false then
							autodestruction()
						end


						local _,screen = workspace.CurrentCamera:WorldToViewportPoint(part.Position)
						if screen then
							nome.Position = Convert(part)
							nome.Visible = true
						else
							nome.Visible = false
						end
					end)
					if sucess == false then
						pcall(function()
							autodestruction()
						end)
						return false
					else
						return true
					end



				end

				table.insert(basefunctions,cu)
			end)
			coroutine.resume(kafgo)
			return 
		end





		return mainesp
	end
	return tesp
end

local mainesp = esp().New()
local tabelaitens = {}
local characterfolder = nil
local normalchest = false
local uncommumchest = false
local rarechest = true
local legendarychest = true
local mysthicalchest = true
local chestesp = false

spawn(function()
	pcall(function()
		--LPH_NO_VIRTUALIZE(function()
		while true do 
			wait(0.01)
			for i,v in pairs(game:GetService("Workspace").Effects:GetChildren()) do
				pcall(function()
					if chestesp == false then return end
					pcall(function()
						if v.PrimaryPart and v:FindFirstChild('Top') and v.ClassName == 'Model' then
							pcall(function()
								local realname = ''
								for j,g in pairs(v:FindFirstChild('Top'):GetDescendants()) do
									if g.ClassName == 'Weld' and g.Name ~= "metalWeld" then
										local extraindonome = string.gsub(g.Name,'Meshes/','')
										extraindonome = string.sub(extraindonome,1,4)
										realname = extraindonome
									elseif string.find(g.Name,'LegendaryChest') then
										realname = 'legendary'                                
									end
								end

								local cor = Color3.new(0.505882, 0.619608, 0.745098)

								if (string.find(string.lower(realname),'mys') or string.find(string.lower(realname),'my')) and mysthicalchest == true then
									cor = Color3.new(128, 0, 128)
									wait(math.random(1,100)/1000)
									mainesp:ESP(v.PrimaryPart,'Mystical Chest',cor,15.0)
								elseif string.find(string.lower(realname),'lege') and legendarychest == true then
									cor = Color3.new(1, 0, 0.0196078)
									wait(math.random(1,100)/1000)
									mainesp:ESP(v.PrimaryPart,'Legendary Chest',cor,15.0)
								elseif string.find(string.lower(realname),'blue') and rarechest == true then
									cor = Color3.new(0, 0.454902, 1)
									wait(math.random(1,100)/1000)
									mainesp:ESP(v.PrimaryPart,'rare Chest',cor,15.0)
								elseif string.find(string.lower(realname),'ucc_') and uncommumchest == true then
									cor = Color3.new(0.505882, 0.619608, 0.745098)
									wait(math.random(1,100)/1000)
									mainesp:ESP(v.PrimaryPart,'uncommon',cor,15.0)
								elseif normalchest == true then
									wait(math.random(1,100)/1000)
									mainesp:ESP(v.PrimaryPart,'Chest',cor,15.0)
								end

							end)
						end
					end)
				end)
			end
		end
		--end)()
	end)
end)


local Player = game:GetService("Players").LocalPlayer
local UIS = game:GetService("UserInputService")
local JumpHeight = 60

local infjump = false

local function Action(Object, Function)
	if Object then
		Function(Object)
	end
end

local Toggle = Section1:AddToggle({
  Name = "Inf Jump",
    Flag = "InfJump",
    CurrentValue = false,
    callback = function(Value)
		infjump = Value
    end,
})
local Slider = Section1:CreateSlider({
    Name = "Jump Height",
    Range = {50, 150},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 50,
    Flag = "JumpHeight", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    callback = function(Value)
		JumpHeight = Value
    end,
})


UIS.InputBegan:Connect(function(UserInput)
	if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space and infjump then
		Action(Player.Character.Humanoid, function(self)
			Action(self.Parent.HumanoidRootPart, function(self)
				self.Velocity = Vector3.new(Player.Character.HumanoidRootPart.AssemblyLinearVelocity.X, JumpHeight, Player.Character.HumanoidRootPart.AssemblyLinearVelocity.Z)
			end)
		end)
	end
end)

local Toggle4 = Section2:AddToggle({
    Name = "Player Esp",
    Flag = "PlayerEsp",
    CurrentValue = false,
    callback = function(Value)
		--esp.enabled = Value
    end,
   -- state = esp.enabled,
})
	
	

	local Toggle5 = Section2:AddToggle({
        Name = "Chest ESP",
        Flag = "ChestESP",
        CurrentValue = false,
        callback = function(Value)
            chestesp = Value
			if chestesp == false then
				mainesp:ClearObjects()
			end       
         end,
	})
	
	
local noClipped = false

local collisionStates = {}

local function ToggleNoClip()
	local character = game.Players.LocalPlayer.Character
	if character then
		for _, part in ipairs(character:GetDescendants()) do
			if part:IsA("BasePart") then
				part.CanCollide = not noClipped
				collisionStates[part] = not noClipped

			end
		end

	end
end

local Toggle5 = Section1:AddToggle({
   Name = "No Clip",
    Flag = "NoClip",
    CurrentValue = false,
    callback = function(Value)
        noClipped = Value
		while true do
			wait(0.01)
			ToggleNoClip()

		end    
     end,
     state = noClipped,
})

local SwimWithDf = Section1:AddToggle({
    Name = "Swim With DF",
    Flag = "SwimWithDF",
    CurrentValue = false,
    callback = function(Value)
        if Value then
			-- Enable the script
			local putaria = Instance.new('Part')
			putaria.Name = 'coatBubble'
			putaria.Parent = Utils:GetCharacter()
		else
			-- Disable the script
			local coatBubble = Utils:GetCharacter():FindFirstChild("coatBubble")
			if coatBubble then
				coatBubble:Destroy()
			end
		end
     end,
})

local NoFallDmg = Section1:AddToggle({
    Name = "No Fall Dmg",
    Flag = "NoFallDmg",
    CurrentValue = false,
    callback = function(Value)
        if Value then
			while wait() do
				game.Players.LocalPlayer.Character.FallDamage.Disabled = true
			end
		else
			while wait() do
				game.Players.LocalPlayer.Character.FallDamage.Disabled = false
			end
		end
     end,

})

local MedalEsp = Section2:AddToggle({
    Name = "Medal esp",
    Flag = "Medalesp",
    CurrentValue = false,
    callback = function(Value)
        local medal = Value
		local medaltabela = {}
		local Workspace = game:GetService("Workspace")

		--LPH_NO_VIRTUALIZE(function()
		function Convert(part)
			local screen = workspace.CurrentCamera:WorldToViewportPoint(part.Position)
			return Vector2.new(screen.X, screen.Y)
		end
		--end)()

		local ioa = os.time()


		spawn(function()
			pcall(function()
				--LPH_NO_VIRTUALIZE(function()
				while Value do wait(1)
					for i,v in pairs(game:GetService("Workspace").Effects:GetChildren()) do
						pcall(function()

							if medal == true then
								if string.find(v.Name,"Medal") then


									mainesp:ESP(v.PrimaryPart,v.Name,Color3.new(255, 255, 255),15.0)

								end
							end
						end)
					end
				end
				--end)()
			end)
		end)
     end,

})

local Geppo = Section1:AddToggle({
    Name = "Geppo",
    Flag = "Geppo",
    CurrentValue = false,
    callback = function(Value)
        local player = game.Players.LocalPlayer
		local replicatedStorage = game:GetService("ReplicatedStorage")

		local statsFolder = replicatedStorage:FindFirstChild("Stats"..player.Name)
		if statsFolder then
			local skillsFolder = statsFolder:FindFirstChild("Skills")
			if skillsFolder then
				local skyWalkValue = skillsFolder:FindFirstChild("skyWalk")
				if skyWalkValue and skyWalkValue:IsA("BoolValue") then
					skyWalkValue.Value = Value
				end
			end
		end
     end,

})

local HitboxExpander = Section4:AddToggle({
    Name = "Hitbox Expander",
    Flag = "HitboxExpander",
    CurrentValue = false,
    callback = function(Value)
        if Value then
			while wait(3) do
				for _,player in ipairs(game:GetService("Players"):GetChildren()) do
					local npc = player.Character
					if npc:FindFirstChild("HumanoidRootPart") and npc.HumanoidRootPart.Size ~= Vector3.new(15,15,15) and npc.Name ~= game.Players.LocalPlayer.Name then
						local Hum = npc.HumanoidRootPart
						Hum.Transparency = 0.7
						Hum.CanCollide = false
						Hum.Size = Vector3.new(21,21,21)
					end
				end
			end

		else
			for _,player in ipairs(game:GetService("Players"):GetChildren()) do
				local npc = player.Character
				if npc:FindFirstChild("HumanoidRootPart") and npc.HumanoidRootPart.Size ~= Vector3.new(15,15,15) and npc.Name ~= game.Players.LocalPlayer.Name then
					local Hum = npc.HumanoidRootPart
					Hum.Transparency = 1
					Hum.CanCollide = false
					Hum.Size = Vector3.new(2, 1.96, 1)
				end
			end
		end
     end,
})
local InvisibleHitbox = Section4:AddToggle({
    Name = "Invisible Hitbox Expander",
    Flag = "InvisibleHitboxExpander",
    CurrentValue = false,
    callback = function(Value)
        if Value  then
			while wait(5) do
				for _,player in ipairs(game:GetService("Players"):GetChildren()) do
					local npc = player.Character
					if npc:FindFirstChild("HumanoidRootPart") and npc.HumanoidRootPart.Size ~= Vector3.new(15,15,15) and npc.Name ~= game.Players.LocalPlayer.Name then
						local Hum = npc.HumanoidRootPart
						Hum.Transparency = 1
						Hum.CanCollide = false
						Hum.Size = Vector3.new(21,21,21)
					end
				end
			end
		else
			for _,player in ipairs(game:GetService("Players"):GetChildren()) do
				local npc = player.Character
				if npc:FindFirstChild("HumanoidRootPart") and npc.HumanoidRootPart.Size ~= Vector3.new(15,15,15) and npc.Name ~= game.Players.LocalPlayer.Name then
					local Hum = npc.HumanoidRootPart
					Hum.Transparency = 1
					Hum.CanCollide = false
					Hum.Size = Vector3.new(2, 1.96, 1)
				end
			end
		end
     end,

})

local amount = 70

game:GetService("Workspace").Camera.FieldOfView = amount

local FOV = Section1:CreateSlider({
    Name = "Player FOV",
    Range = {70, 139},
    Increment = 1,
    Suffix = "FOV",
    CurrentValue = 70,
    Flag = "FOV", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    callback = function(Value)
        amount = Value
		game:GetService("Workspace").Camera.FieldOfView = amount    end,

    
})

local TpUnderTheGround = Section3:CreateKeybind({
	Name = "Tp Under The Ground",
	holdertext = "None",
		CurrentKeybind = "F",

	callback = function(Keybind)
		game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(0,-10,0))
	end,


})

local Keybind = Section3:CreateKeybind({
	Name = "Kraken Blade Entrnal Flow",
	holdertext = "None",
		CurrentKeybind = "F",

	callback = function(Keybind)
		game:GetService("ReplicatedStorage").Events.Skill:InvokeServer("Eternal Flow")

	end,


})
local Keybind = Section3:CreateKeybind({
	Name = "Gomu Gattaling",
	holdertext = "None",
		CurrentKeybind = "F",

	callback = function(Keybind)
		local args = {
			[1] = "Gomu-Gomu no Gatling",
			[2] = {
				["cf"] = CFrame.new(-5460.55127, 87.449585, -8618.15527, -0.908614159, 1.90172909e-08, -0.417636603, -4.43938797e-09, 1, 5.51938726e-08, 0.417636603, 5.20039869e-08, -0.908614159)
			}
		}

		game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(unpack(args))

	end,

})
local Keybind = Section3:CreateKeybind({
	Name = "Black leg Party Table",
	holdertext = "None",
		CurrentKeybind = "F",

	callback = function(Keybind)
		local args = {
			[1] = "Party Table Kick Course"
		}

		game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(unpack(args))
	end,
})


local StackSuna = Section3:AddToggle({
    Name = "Stack Suna Skills",
    Flag = "StackSunaSkills",
    CurrentValue = false,
    callback = function(Value)
        _G.StackSuna = Value
		while _G.StackSuna do
			local args = {
				[1] = "Desert Spada",
				[2] = {
					["cf"] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
				}
			}

			game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(unpack(args))
			task.wait(6.9)
		end
     end,
})

local SunaRelease = Section3:CreateKeybind({
	Name = "Release Suna Skills",
	holdertext = "None",
		CurrentKeybind = "F",

	callback = function(Keybind)
		for _,v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
			print("found ScriptContext error detection, removing")
			v:Disable()
		end
		local plr = game:GetService("Players").LocalPlayer
		local Name = plr.Name
		local args = {
			[1] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
		}
		for i,v in pairs(game:GetService("ReplicatedStorage").PlayerRemotes:GetChildren()) do
			local stringName = v.Name
			if string.match(stringName, Name) then
				v:FireServer(unpack(args))
			end
			task.wait(0.3)
		end
	end,
})
local StackGura = Section3:AddToggle({
    Name = "Stack Gura Skill",
    Flag = "StackGuraSkill",
    CurrentValue = false,
    callback = function(Value)
        _G.StackSuna = Value
		while _G.StackSuna do
			local args = {
				[1] = "Shock Punch",
				[2] = {
					["cf"] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
				}
			}

			game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(unpack(args))
			task.wait(12)
		end
     end,
})

local GuraRelease = Section3:CreateKeybind({
	Name = "Release Gura  Skills",
	holdertext = "None",

	CurrentKeybind = "F",
	callback = function(Keybind)
		for _,v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
			print("found ScriptContext error detection, removing")
			v:Disable()
		end
		local plr = game:GetService("Players").LocalPlayer
		local Name = plr.Name
		local args = {
			[1] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
		}
		for i,v in pairs(game:GetService("ReplicatedStorage").PlayerRemotes:GetChildren()) do
			local stringName = v.Name
			if string.match(stringName, Name) then
				v:FireServer(unpack(args))
			end
			task.wait(0.3)
		end
	end,
})
   
LoadConfiguration(Library.Flags)
