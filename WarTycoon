local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- ESP and Aimbot settings
local ESP = {Enabled = false, ShowDistance = false, highlights = {}}
local AimbotFovEnabled = false
local FOVring, aimbotLoop
local fov = 150
local smoothing = 1
local sensitivity = 1
local aimPart = "Head"  -- Default aim part
local teamCheck = false

-- Initialize the Rayfield library and create the main window
local Window = Rayfield:CreateWindow({
    Name = "Legend Hub | Ware Tycoon",
    LoadingTitle = "Legend Hub",
    LoadingSubtitle = "by lg0_",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Legend Hub"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = true,
    KeySettings = {
        Title = "War Tycoon | Key",
        Subtitle = "by lg0_",
        Note = "Yaba4a ana b7bk",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"123"}
    }
})

local MainTab = Window:CreateTab("Main")
local ESPTab = Window:CreateTab("ESP")
local AimbotTab = Window:CreateTab("Aimbot")

-- Walk Speed and Jump Power Sliders
MainTab:CreateSlider({
    Name = "Walk Speed",
    Range = {0, 200},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Flag = "Slider1",
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end,
})

MainTab:CreateSlider({
    Name = "Jump Power",
    Range = {0, 200},
    Increment = 1,
    Suffix = "Jump",
    CurrentValue = 50,
    Flag = "Slider2",
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
    end,
})

-- NoClip Toggle
local NoClipEnabled = false
MainTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Flag = "Toggle3",
    Callback = function(Value)
        NoClipEnabled = Value
        if Value then
            game:GetService("RunService").Stepped:Connect(function()
                if NoClipEnabled then
                    for _, Part in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                        if Part:IsA("BasePart") then
                            Part.CanCollide = false
                        end
                    end
                end
            end)
        else
            for _, Part in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if Part:IsA("BasePart") then
                    Part.CanCollide = true
                end
            end
        end
    end,
})

-- ESP Toggle and Highlight
local ESPEnabled = false
local ESPLabels = {}
local ESPColor = Color3.fromRGB(255, 255, 255)

local function CreateESPLabel(Player)
    local Label = Drawing.new("Text")
    Label.Text = Player.Name
    Label.Size = 20
    Label.Color = ESPColor
    Label.Visible = true
    Label.Center = true
    Label.Outline = false
    Label.Font = Drawing.Fonts.UI
    Label.StrokeWidth = 2
    Label.StrokeTransparency = 0.8
    return Label
end

local function UpdateESPLabel(Label, Player, ShowDistance)
    local Character = Player.Character
    if Character and Character:FindFirstChild("HumanoidRootPart") then
        local Head = Character:FindFirstChild("HumanoidRootPart")
        local ScreenPosition = workspace.CurrentCamera:WorldToViewportPoint(Head.Position)
        if ScreenPosition.Z >= 0 then
            if ShowDistance then
                local distance = (game.Players.LocalPlayer:DistanceFromCharacter(Head.Position))
                Label.Text = Player.Name .. " [" .. math.floor(distance) .. "m]"
            else
                Label.Text = Player.Name
            end
            Label.Position = Vector2.new(ScreenPosition.X, ScreenPosition.Y)
            Label.Visible = true
        else
            Label.Visible = false
        end
    else
        Label.Visible = false
    end
end

function ESP:start()
    ESP:stop()
    ESP.loop = game:GetService("RunService").Heartbeat:Connect(function()
        local ShowDistance = ESP.ShowDistance
        for _, Player in ipairs(game.Players:GetPlayers()) do
            if Player ~= game.Players.LocalPlayer then
                local Label = ESPLabels[Player]
                if not Label then
                    Label = CreateESPLabel(Player)
                    ESPLabels[Player] = Label
                end
                UpdateESPLabel(Label, Player, ShowDistance)
            end
        end
    end)
end

function ESP:stop()
    if ESP.loop then
        ESP.loop:Disconnect()
        ESP.loop = nil
    end
    for _, Label in pairs(ESPLabels) do
        Label:Remove()
    end
    ESPLabels = {}
end

ESPTab:CreateToggle({
    Name = "ESP",
    CurrentValue = false,
    Flag = "Toggle2",
    Callback = function(Value)
        ESPEnabled = Value
        if Value then
            ESP:start()
        else
            ESP:stop()
        end
    end,
})

ESPTab:CreateColorPicker({
    Name = "ESP Color",
    Color = ESPColor,
    Flag = "ColorPicker1",
    Callback = function(Value)
        ESPColor = Value
        for _, Label in pairs(ESPLabels) do
            Label.Color = Value
        end
    end,
})

local HighlightEnabled = false
local HighlightColor = Color3.fromRGB(255, 0, 0)

function ESP:highlightStart()
    ESP:highlightStop()
    ESP.highlightLoop = game:GetService("RunService").Heartbeat:Connect(function()
        for _, Player in ipairs(game.Players:GetPlayers()) do
            if Player ~= game.Players.LocalPlayer then
                local Character = Player.Character
                if Character and Character:FindFirstChild("HumanoidRootPart") and not ESP.highlights[Player] then
                    local Highlight = Instance.new("Highlight")
                    Highlight.Adornee = Character
                    Highlight.FillColor = HighlightColor
                    Highlight.OutlineColor = Color3.fromRGB(0, 0, 0)
                    Highlight.Parent = Character
                    ESP.highlights[Player] = Highlight
                end
            end
        end
    end)
end

function ESP:highlightStop()
    if ESP.highlightLoop then
        ESP.highlightLoop:Disconnect()
        ESP.highlightLoop = nil
    end
    for _, Highlight in pairs(ESP.highlights) do
        Highlight:Destroy()
    end
    ESP.highlights = {}
end

ESPTab:CreateToggle({
    Name = "Highlight",
    CurrentValue = false,
    Flag = "Toggle3",
    Callback = function(Value)
        HighlightEnabled = Value
        if Value then
            ESP:highlightStart()
        else
            ESP:highlightStop()
        end
    end,
})

ESPTab:CreateColorPicker({
    Name = "Highlight Color",
    Color = HighlightColor,
    Flag = "ColorPicker2",
    Callback = function(Value)
        HighlightColor = Value
        for _, Highlight in pairs(ESP.highlights) do
            Highlight.FillColor = Value
        end
    end,
})

-- Aimbot with FOV Implementation
local function initializeAimbotWithFOV()
    FOVring = Drawing.new("Circle")
    FOVring.Visible = true
    FOVring.Thickness = 1.5
    FOVring.Radius = fov
    FOVring.Transparency = 1
    FOVring.Color = Color3.fromRGB(255, 128, 128)
    FOVring.Position = workspace.CurrentCamera.ViewportSize / 2

    aimbotLoop = game:GetService("RunService").RenderStepped:Connect(function()
        local UserInputService = game:GetService("UserInputService")
        local pressed = UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)
        local cam = workspace.CurrentCamera
        local zz = workspace.CurrentCamera.ViewportSize / 2

        if AimbotFovEnabled and pressed then
            local curTar = getClosest(cam.CFrame)
            if curTar then
                local aimPos = curTar.Character[aimPart].Position
                local ssHeadPoint = cam:WorldToScreenPoint(aimPos)
                ssHeadPoint = Vector2.new(ssHeadPoint.X, ssHeadPoint.Y)
                if (ssHeadPoint - zz).Magnitude < fov then
                    local targetCFrame = CFrame.new(cam.CFrame.Position, aimPos)
                    workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(targetCFrame, smoothing * sensitivity)
                end
            end
        end

        if UserInputService:IsKeyDown(Enum.KeyCode.Delete) then
            aimbotLoop:Disconnect()
            FOVring:Remove()
        end
    end)
end

local function getClosest(cframe)
    local ray = Ray.new(cframe.Position, cframe.LookVector).Unit
    local target = nil
    local mag = math.huge

    for i, v in pairs(game.Players:GetPlayers()) do
        if v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") and v ~= game.Players.LocalPlayer and (v.Team ~= game.Players.LocalPlayer.Team or (not teamCheck)) then
            local aimPos = v.Character[aimPart].Position
            local magBuf = (aimPos - ray:ClosestPoint(aimPos)).Magnitude

            if magBuf < mag then
                mag = magBuf
                target = v
            end
        end
    end

    return target
end

local function initializeAimbotWithFOV()
    FOVring = Drawing.new("Circle")
    FOVring.Visible = true
    FOVring.Thickness = 1.5
    FOVring.Radius = fov
    FOVring.Transparency = 1
    FOVring.Color = Color3.fromRGB(255, 128, 128)
    FOVring.Position = workspace.CurrentCamera.ViewportSize / 2

    aimbotLoop = game:GetService("RunService").RenderStepped:Connect(function()
        local UserInputService = game:GetService("UserInputService")
        local pressed = UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)
        local cam = workspace.CurrentCamera
        local zz = workspace.CurrentCamera.ViewportSize / 2

        if AimbotFovEnabled and pressed then
            local curTar = getClosest(cam.CFrame)
            if curTar then
                local aimPos = curTar.Character[aimPart].Position
                local ssHeadPoint = cam:WorldToScreenPoint(aimPos)
                ssHeadPoint = Vector2.new(ssHeadPoint.X, ssHeadPoint.Y)
                if (ssHeadPoint - zz).Magnitude < fov then
                    local targetCFrame = CFrame.new(cam.CFrame.Position, aimPos)
                    workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(targetCFrame, smoothing * sensitivity)
                end
            end
        end

        if UserInputService:IsKeyDown(Enum.KeyCode.Delete) then
            aimbotLoop:Disconnect()
            FOVring:Remove()
        end
    end)
end

-- Aimbot Tab Controls
AimbotTab:CreateToggle({
    Name = "Aimbot with Fov",
    CurrentValue = false,
    Flag = "ToggleAimbotFov",
    Callback = function(Value)
        AimbotFovEnabled = Value
        if Value then
            initializeAimbotWithFOV()
        else
            if aimbotLoop then aimbotLoop:Disconnect() end
            if FOVring then FOVring:Remove() end
        end
    end,
})

AimbotTab:CreateSlider({
    Name = "FOV Circle Scale",
    Range = {0, 500},
    Increment = 1,
    Suffix = "",
    CurrentValue = fov,
    Flag = "SliderFOV",
    Callback = function(Value)
        fov = Value
        if FOVring then
            FOVring.Radius = fov
        end
    end,
})

AimbotTab:CreateSlider({
    Name = "Smoothing",
    Range = {0, 1},
    Increment = 0.1,
    Suffix = "",
    CurrentValue = smoothing,
    Flag = "SliderSmoothing",
    Callback = function(Value)
        smoothing = Value
    end,
})

AimbotTab:CreateSlider({
    Name = "Sensitivity",
    Range = {0, 3},
    Increment = 0.1,
    Suffix = "",
    CurrentValue = sensitivity,
    Flag = "SliderSensitivity",
    Callback = function(Value)
        sensitivity = Value
    end,
})

AimbotTab:CreateDropdown({
    Name = "Aim Part",
    Options = {"Head", "Torso"},
    CurrentOption = "Head",
    Flag = "DropdownAimPart",
    Callback = function(Value)
        aimPart = Value
    end,
})

local TeleportTab = Window:CreateTab("Teleport", nil) -- Title, Image
local TeleportSection = TeleportTab:CreateSection("Teleport")

local Dropdown = TeleportTab:CreateDropdown({
    Name = "Teleport Players",
    Options = {}, 
    CurrentOption = {}, 
    MultipleOptions = false,
    Flag = "DropdownTeleportPlayer", 
    Callback = function(Option)
        
        if #Option > 0 then
            local selectedPlayer = Option[1] 
            local player = getPlayerByName(selectedPlayer) 

            if player then
                -- Teleport to the player's character
                game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(player.Character.PrimaryPart.CFrame)
            else
                print("Player not found.")
            end
        end
    end,
})

-- Function to get player object by name
local function getPlayerByName(name)
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Name == name then
            return player
        end
    end
    return nil -- Player not found
end

-- Function to populate dropdown options with player names
local function populateDropdownOptions()
    local options = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        table.insert(options, player.Name)
    end
    Dropdown:SetOptions(options)
end

-- Initially populate dropdown options
populateDropdownOptions()

-- Update dropdown options when a new player joins
game.Players.PlayerAdded:Connect(populateDropdownOptions)


print("Script Loaded")
